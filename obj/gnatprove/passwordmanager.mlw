(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "c" defined at passwordmanager.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__readcommand__c
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant c [#"passwordmanager.ads" 11 0 0][@model_projected] [@name:C] [@model_trace:2626] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "c" defined at passwordmanager.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__readcommand__c___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:5, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.3045] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.3055] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.3045] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.3055] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:10, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10s" defined at passwordmanager.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__readcommand__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "p1" defined at passwordmanager.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__unlock__p1
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant p1 [#"passwordmanager.ads" 18 0 0][@model_trace:2753] [@name:P1] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p1" defined at passwordmanager.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__unlock__p1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "p2" defined at passwordmanager.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__unlock__p2
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant p2 [#"passwordmanager.ads" 18 0 0][@name:P2] [@model_trace:2764] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p2" defined at passwordmanager.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__unlock__p2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "input" defined at passwordmanager.ads:26, created in Gnat2Why.Decls.Translate_Constant *)
module Passwordmanager__ispin__input
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant input [#"passwordmanager.ads" 26 0 0][@model_trace:2839] [@name:input] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "input" defined at passwordmanager.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__ispin__input___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T12s" defined at passwordmanager.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__L11s__T12s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t12s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref =
  { mutable t12s__content : t12s }
 
 function t12s__ref_t12s__content__projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref_t12s__content__projection
 
 meta "inline:no" function t12s__ref_t12s__content__projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "ispin" defined at passwordmanager.ads:26, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__ispin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function ispin 
   (input : Standard__string.string) : bool
 
 val predicate ispin__function_guard 
   (temp___result_155 : bool) (input : Standard__string.string)

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TS2bP1" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__readcommand__TS2bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS2bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref =
  { mutable tS2bP1__content : tS2bP1 }
 
 function tS2bP1__ref_tS2bP1__content__projection 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref_tS2bP1__content__projection
 
 meta "inline:no" function tS2bP1__ref_tS2bP1__content__projection
 
 val tS2bP1__havoc 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__readcommand__S2b
 use export Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s2b =
  tokenarray
 
 type s2b__ref =
  { mutable s2b__content : s2b }
 
 function s2b__ref_s2b__content__projection 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref_s2b__content__projection
 
 meta "inline:no" function s2b__ref_s2b__content__projection
 
 val s2b__havoc 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__readcommand__TS1bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content : tS1bP1 }
 
 function tS1bP1__ref_tS1bP1__content__projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref_tS1bP1__content__projection
 
 meta "inline:no" function tS1bP1__ref_tS1bP1__content__projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__readcommand__S1b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s1b =
  string
 
 type s1b__ref =
  { mutable s1b__content : s1b }
 
 function s1b__ref_s1b__content__projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref_s1b__content__projection
 
 meta "inline:no" function s1b__ref_s1b__content__projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 16 0 0][@model_projected] [@model_trace:3128] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TS3bP1" defined at passwordmanager.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__TS3bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS3bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS3bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS3bP1__ref =
  { mutable tS3bP1__content : tS3bP1 }
 
 function tS3bP1__ref_tS3bP1__content__projection 
   (a : tS3bP1__ref) : tS3bP1 =
  a.tS3bP1__content
 
 meta "model_projection" function tS3bP1__ref_tS3bP1__content__projection
 
 meta "inline:no" function tS3bP1__ref_tS3bP1__content__projection
 
 val tS3bP1__havoc 
   (x : tS3bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S3b" defined at passwordmanager.adb:33, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__S3b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s3b =
  string
 
 type s3b__ref =
  { mutable s3b__content : s3b }
 
 function s3b__ref_s3b__content__projection 
   (a : s3b__ref) : s3b =
  a.s3b__content
 
 meta "model_projection" function s3b__ref_s3b__content__projection
 
 meta "inline:no" function s3b__ref_s3b__content__projection
 
 val s3b__havoc 
   (x : s3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at passwordmanager.adb:40, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__L_1__T5b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content : t5b }
 
 function t5b__ref_t5b__content__projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref_t5b__content__projection
 
 meta "inline:no" function t5b__ref_t5b__content__projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at passwordmanager.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__L_1__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T8b" defined at passwordmanager.adb:45, created in Gnat2Why.Types.Translate_Type *)
module Passwordmanager__ispin__L_1__L7b__T8b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t8b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t8b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t8b__ref =
  { mutable t8b__content : t8b }
 
 function t8b__ref_t8b__content__projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref_t8b__content__projection
 
 meta "inline:no" function t8b__ref_t8b__content__projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "numtokens" defined at passwordmanager.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__readcommand__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"passwordmanager.ads" 11 0 0][@model_trace:2635] [@model_projected] [@name:NumTokens]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at passwordmanager.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__readcommand__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at passwordmanager.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__readcommand__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"passwordmanager.ads" 11 0 0][@model_projected] [@name:T] [@model_trace:2644]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant t__first [#"passwordmanager.ads" 11 0 0][@model_projected] [@name:T] [@model_trace:2644'First] 
   : Standard__integer.integer

 
 val constant t__last [#"passwordmanager.ads" 11 0 0][@model_projected] [@name:T] [@model_trace:2644'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at passwordmanager.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__readcommand__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "islocked" defined at passwordmanager.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__unlock__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val islocked [#"passwordmanager.ads" 18 0 0][@model_projected] [@name:isLocked] [@model_trace:2775]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at passwordmanager.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__unlock__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "islocked" defined at passwordmanager.ads:22, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__lock__islocked
 use        "_gnatprove_standard".Main
 use        "int".Int

 val islocked [#"passwordmanager.ads" 22 0 0][@model_trace:2809] [@model_projected] [@name:isLocked]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "islocked" defined at passwordmanager.ads:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__lock__islocked___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at passwordmanager.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__readcommand__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"passwordmanager.adb" 9 0 0][@model_trace:2361] [@name:Tokens] [@model_projected]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"passwordmanager.adb" 9 0 0][@name:Tokens] [@model_trace:2361'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokens__last [#"passwordmanager.adb" 9 0 0][@name:Tokens] [@model_projected] [@model_trace:2361'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at passwordmanager.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__readcommand__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:3137]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:3137'First] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 16 0 0][@name:Tokens] [@model_projected] [@model_trace:3137'Last] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 16 0 0][@model_trace:3146] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "ch" defined at passwordmanager.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__ispin__ch
 use        "_gnatprove_standard".Main
 use        "int".Int

 val ch [#"passwordmanager.adb" 34 0 0][@model_projected] [@name:ch] [@model_trace:2497]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "ch" defined at passwordmanager.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__ispin__ch___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "k" defined at passwordmanager.adb:40, created in Gnat2Why.Decls.Translate_Variable *)
module Passwordmanager__ispin__L_1__k
 use        "_gnatprove_standard".Main
 use        "int".Int

 val k [#"passwordmanager.adb" 40 0 0][@model_trace:2520] [@name:k] [@model_projected]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "k" defined at passwordmanager.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__ispin__L_1__k___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "readcommand" defined at passwordmanager.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__readcommand
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unlock" defined at passwordmanager.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "lock" defined at passwordmanager.ads:22, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passwordmanager__lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_156 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_157 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at passwordmanager.adb:40, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Passwordmanager__ispin__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at passwordmanager.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passwordmanager__ispin__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_162 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_162 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_162 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_163 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_164 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_163 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_164 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_163 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_164 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_171 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) =
  (if (temp___skip_constant_168) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_171) (Mystringtokeniser__tokenarray.last temp___expr_171))))
 val dynamic_invariant [@inline] 
   (temp___expr_171 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_171 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_167 : bool) (temp___skip_constant_168 : bool) (temp___do_toplevel_169 : bool) (temp___do_typ_inv_170 : bool) }

end

(* Module giving axioms for type "T10s" defined at passwordmanager.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__readcommand__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TpinB" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "T12s" defined at passwordmanager.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__L11s__T12s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) =
  (if (( temp___is_init_186 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_190)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_190 : int) (temp___is_init_186 : bool) (temp___skip_constant_187 : bool) (temp___do_toplevel_188 : bool) (temp___do_typ_inv_189 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_191 : int) (temp___skip_top_level_192 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_191 : int) (temp___skip_top_level_192 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_191 : int) (temp___skip_top_level_192 : bool) }

end

(* Module giving axioms for type "TS2bP1" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__readcommand__TS2bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S2b" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__readcommand__S2b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Passwordmanager__readcommand__t as Passwordmanager__readcommand__t
 use        Passwordmanager__readcommand__S2b as Passwordmanager__readcommand__S2b

 predicate dynamic_invariant [@inline] 
   (temp___expr_197 : Passwordmanager__readcommand__S2b.s2b) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) =
  (if (temp___skip_constant_194) then (
   true) else (
   ( (Passwordmanager__readcommand__S2b.dynamic_property (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last) (Passwordmanager__readcommand__S2b.first temp___expr_197) (Passwordmanager__readcommand__S2b.last temp___expr_197)) /\ ( ((Passwordmanager__readcommand__S2b.first temp___expr_197) = (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first)) /\ ((Passwordmanager__readcommand__S2b.last temp___expr_197) = (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_197 : Passwordmanager__readcommand__S2b.s2b) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_197 : Passwordmanager__readcommand__S2b.s2b) (temp___is_init_193 : bool) (temp___skip_constant_194 : bool) (temp___do_toplevel_195 : bool) (temp___do_typ_inv_196 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_199 : Passwordmanager__readcommand__S2b.s2b) (temp___skip_top_level_200 : bool) =
  ( ( true /\ ((Passwordmanager__readcommand__S2b.first temp___expr_199) = (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first)) )/\((Passwordmanager__readcommand__S2b.last temp___expr_199) = (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) )
 val default_initial_assumption [@inline] 
   (temp___expr_199 : Passwordmanager__readcommand__S2b.s2b) (temp___skip_top_level_200 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_199 : Passwordmanager__readcommand__S2b.s2b) (temp___skip_top_level_200 : bool) }

end

(* Module giving axioms for type "TS1bP1" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__readcommand__TS1bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S1b" defined at passwordmanager.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__readcommand__S1b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passwordmanager__readcommand__c as Passwordmanager__readcommand__c
 use        Passwordmanager__readcommand__S1b as Passwordmanager__readcommand__S1b

 predicate dynamic_invariant [@inline] 
   (temp___expr_209 : Passwordmanager__readcommand__S1b.s1b) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) =
  (if (temp___skip_constant_206) then (
   true) else (
   ( (Passwordmanager__readcommand__S1b.dynamic_property (Standard__string.first Passwordmanager__readcommand__c.c) (Standard__string.last Passwordmanager__readcommand__c.c) (Passwordmanager__readcommand__S1b.first temp___expr_209) (Passwordmanager__readcommand__S1b.last temp___expr_209)) /\ ( ((Passwordmanager__readcommand__S1b.first temp___expr_209) = (Standard__string.first Passwordmanager__readcommand__c.c)) /\ ((Passwordmanager__readcommand__S1b.last temp___expr_209) = (Standard__string.last Passwordmanager__readcommand__c.c)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_209 : Passwordmanager__readcommand__S1b.s1b) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_209 : Passwordmanager__readcommand__S1b.s1b) (temp___is_init_205 : bool) (temp___skip_constant_206 : bool) (temp___do_toplevel_207 : bool) (temp___do_typ_inv_208 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_211 : Passwordmanager__readcommand__S1b.s1b) (temp___skip_top_level_212 : bool) =
  ( ( true /\ ((Passwordmanager__readcommand__S1b.first temp___expr_211) = (Standard__string.first Passwordmanager__readcommand__c.c)) )/\((Passwordmanager__readcommand__S1b.last temp___expr_211) = (Standard__string.last Passwordmanager__readcommand__c.c)) )
 val default_initial_assumption [@inline] 
   (temp___expr_211 : Passwordmanager__readcommand__S1b.s1b) (temp___skip_top_level_212 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_211 : Passwordmanager__readcommand__S1b.s1b) (temp___skip_top_level_212 : bool) }

end

(* Module giving axioms for type "TS3bP1" defined at passwordmanager.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__TS3bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S3b" defined at passwordmanager.adb:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__S3b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passwordmanager__ispin__input as Passwordmanager__ispin__input
 use        Passwordmanager__ispin__S3b as Passwordmanager__ispin__S3b

 predicate dynamic_invariant [@inline] 
   (temp___expr_223 : Passwordmanager__ispin__S3b.s3b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) =
  (if (temp___skip_constant_220) then (
   true) else (
   ( (Passwordmanager__ispin__S3b.dynamic_property (Standard__string.first Passwordmanager__ispin__input.input) (Standard__string.last Passwordmanager__ispin__input.input) (Passwordmanager__ispin__S3b.first temp___expr_223) (Passwordmanager__ispin__S3b.last temp___expr_223)) /\ ( ((Passwordmanager__ispin__S3b.first temp___expr_223) = (Standard__string.first Passwordmanager__ispin__input.input)) /\ ((Passwordmanager__ispin__S3b.last temp___expr_223) = (Standard__string.last Passwordmanager__ispin__input.input)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_223 : Passwordmanager__ispin__S3b.s3b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_223 : Passwordmanager__ispin__S3b.s3b) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool) (temp___do_typ_inv_222 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_225 : Passwordmanager__ispin__S3b.s3b) (temp___skip_top_level_226 : bool) =
  ( ( true /\ ((Passwordmanager__ispin__S3b.first temp___expr_225) = (Standard__string.first Passwordmanager__ispin__input.input)) )/\((Passwordmanager__ispin__S3b.last temp___expr_225) = (Standard__string.last Passwordmanager__ispin__input.input)) )
 val default_initial_assumption [@inline] 
   (temp___expr_225 : Passwordmanager__ispin__S3b.s3b) (temp___skip_top_level_226 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_225 : Passwordmanager__ispin__S3b.s3b) (temp___skip_top_level_226 : bool) }

end

(* Module giving axioms for type "T5b" defined at passwordmanager.adb:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__L_1__T5b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T10b" defined at passwordmanager.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__L_1__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T8b" defined at passwordmanager.adb:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passwordmanager__ispin__L_1__L7b__T8b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module for declaring a program function (and possibly an axiom) for "readcommand" defined at passwordmanager.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__readcommand___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val readcommand 
   (c : Standard__string.string) (numtokens : int__ref) (t : Array__Int__Mystringtokeniser__tokenextent.map__ref) (t__first : Standard__integer.integer) (t__last : Standard__integer.integer) : unit
  requires {  ( (if (((Standard__string.length c) > (0 : int))) then (
   ( [@GP_Pretty_Ada:2670] ((Standard__string.first c) <= (Standard__string.last c)) )) else (
   ( [@GP_Pretty_Ada:24116] true ))) /\ ( [@GP_Pretty_Ada:2679] ((Standard__integer__rep.to_rep t__last) >= (Standard__integer__rep.to_rep t__first)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:2687] (numtokens.int__content <= (Integer.length (Standard__integer__rep.to_rep t__first) (Standard__integer__rep.to_rep t__last))) ) /\ (forall index   [@model_trace:2692] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep t__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep t__first) + (numtokens.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:2717] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first c)) ) /\ ( [@GP_Pretty_Ada:2727] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2737] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last c) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( (Standard__natural___axiom.dynamic_invariant numtokens.int__content True True True True) /\ ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep t__first) (Standard__integer__rep.to_rep t__last)))) /\ (forall temp___174   : int.
   (if (( ((Standard__integer__rep.to_rep t__first) <= temp___174) /\ (temp___174 <= (Standard__integer__rep.to_rep t__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get t.Array__Int__Mystringtokeniser__tokenextent.map__content temp___174) True False True True)) else true)) ) ) ) }
  writes {numtokens, t}

end

(* Module for declaring a program function (and possibly an axiom) for "unlock" defined at passwordmanager.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int

 val unlock 
   (p1 : int) (p2 : int) (islocked : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:23968] ( (islocked.bool__content = True) <-> true ) ) }
  ensures {  (if ((p1 = p2)) then (
   ( [@GP_Pretty_Ada:2800] ( (islocked.bool__content = True) <-> false ) )) else (
   ( [@GP_Pretty_Ada:24181] true ))) }
  writes {islocked}

end

(* Module for declaring a program function (and possibly an axiom) for "lock" defined at passwordmanager.ads:22, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int

 val lock 
   (islocked : bool__ref) : unit
  requires {  ( [@GP_Pretty_Ada:24007] ( (islocked.bool__content = True) <-> false ) ) }
  ensures {  ( [@GP_Pretty_Ada:24017] ( (islocked.bool__content = True) <-> true ) ) }
  writes {islocked}

end

(* Module for declaring a program function (and possibly an axiom) for "ispin" defined at passwordmanager.ads:26, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passwordmanager__ispin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passwordmanager__ispin as Passwordmanager__ispin
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val ispin 
   (input : Standard__string.string) : bool
  requires {  ( [@GP_Pretty_Ada:24044] ((Standard__string.first input) <= (Standard__string.last input)) ) }
  ensures {  ( ( (result = (Passwordmanager__ispin.ispin input)) /\ (Passwordmanager__ispin.ispin__function_guard result input) )/\( (if (( (result = True) <-> true )) then (
   (forall i   [@name:I] [@model_trace:2870]  : int.
    ( ( ((Standard__string.first input) <= i) /\ (i <= (Standard__string.last input)) ) -> ( ( ( [@GP_Pretty_Ada:2889] ((Standard__string.first input) <= (Standard__string.last input)) ) /\ ( [@GP_Pretty_Ada:2897] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array input) i)) >= (48 : int)) ) ) /\ ( [@GP_Pretty_Ada:2903] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array input) i)) <= (57 : int)) ) ) ))) else (
   ( [@GP_Pretty_Ada:24230] true ))) /\ (if (( (result = True) <-> true )) then (
   ( [@GP_Pretty_Ada:2915] ((Standard__string.length input) = (4 : int)) )) else (
   ( [@GP_Pretty_Ada:24236] true ))) ) ) }
 
 axiom ispin__post_axiom :
  (forall input   : Standard__string.string [(Passwordmanager__ispin.ispin input)].
   ( ( (Standard__string___axiom.dynamic_invariant input True True True True) /\ ( [@GP_Pretty_Ada:24044] ((Standard__string.first input) <= (Standard__string.last input)) ) ) -> (let result = (Passwordmanager__ispin.ispin input) in (
    (if ((Passwordmanager__ispin.ispin__function_guard result input)) then (
     ( ( ( (if (( (result = True) <-> true )) then (
      (forall i   [@name:I] [@model_trace:2870]  : int.
       ( ( ((Standard__string.first input) <= i) /\ (i <= (Standard__string.last input)) ) -> ( ( ( [@GP_Pretty_Ada:2889] ((Standard__string.first input) <= (Standard__string.last input)) ) /\ ( [@GP_Pretty_Ada:2897] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array input) i)) >= (48 : int)) ) ) /\ ( [@GP_Pretty_Ada:2903] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array input) i)) <= (57 : int)) ) ) ))) else (
      ( [@GP_Pretty_Ada:24230] true ))) /\ (if (( (result = True) <-> true )) then (
      ( [@GP_Pretty_Ada:2915] ((Standard__string.length input) = (4 : int)) )) else (
      ( [@GP_Pretty_Ada:24236] true ))) ) /\ true )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:3170] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:22975] true ))) /\ ( [@GP_Pretty_Ada:3179] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___216   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___216) /\ (temp___216 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___216) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) }
  writes {tokens, count}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "passwordmanager" defined at passwordmanager.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Passwordmanager__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"passwordmanager.ads" 8 0 0][@GP_Subp:passwordmanager.ads:8] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 8 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"passwordmanager.ads" 8 0 0] ());
  ([#"passwordmanager.ads" 11 0 0] ());
  ([#"passwordmanager.ads" 13 0 0] ());
  ([#"passwordmanager.ads" 12 0 0] ());
  ([#"passwordmanager.ads" 18 0 0] ());
  ([#"passwordmanager.ads" 20 0 0] ());
  ([#"passwordmanager.ads" 19 0 0] ());
  ([#"passwordmanager.ads" 22 0 0] ());
  ([#"passwordmanager.ads" 24 0 0] ());
  ([#"passwordmanager.ads" 23 0 0] ());
  ([#"passwordmanager.ads" 26 0 0] ());
  ([#"passwordmanager.ads" 28 0 0] ());
  ([#"passwordmanager.ads" 27 0 0] ());
   assume {  ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"passwordmanager.adb" 5 0 0] ());
  ([#"passwordmanager.adb" 7 0 0] ());
  ([#"passwordmanager.adb" 19 0 0] ());
  ([#"passwordmanager.adb" 26 0 0] ());
  ([#"passwordmanager.adb" 33 0 0] ());
  ();
  ( [@GP_Sloc:passwordmanager.adb:53:1] ([#"passwordmanager.adb" 53 0 0] ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "readcommand" defined at passwordmanager.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passwordmanager__readcommand__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Standard__string___axiom as Standard__string___axiom
 use        Passwordmanager__readcommand__c as Passwordmanager__readcommand__c
 use        Passwordmanager__readcommand__numtokens as Passwordmanager__readcommand__numtokens
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Passwordmanager__readcommand__t as Passwordmanager__readcommand__t
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Passwordmanager__readcommand__tokens as Passwordmanager__readcommand__tokens
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passwordmanager__readcommand__tokens___axiom as Passwordmanager__readcommand__tokens___axiom
 use        Passwordmanager__readcommand__c___axiom as Passwordmanager__readcommand__c___axiom
 use        Passwordmanager__readcommand__numtokens___axiom as Passwordmanager__readcommand__numtokens___axiom
 use        Passwordmanager__readcommand__t___axiom as Passwordmanager__readcommand__t___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom

 let def [#"passwordmanager.ads" 11 0 0][@GP_Subp:passwordmanager.ads:11] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 11 0 0] true }
  ensures { [#"passwordmanager.ads" 11 0 0] ([#"passwordmanager.ads" 13 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:passwordmanager.ads:13:14] [@model_vc_post] [@comment:     Post => NumTokens <= T'Length and              ^ passwordmanager.ads:13:14:VC_POSTCONDITION] [@GP_Shape:pragargs__and] [@GP_Id:9] ( ( [@GP_Pretty_Ada:2687] [@GP_Sloc:passwordmanager.ads:13:14] (Passwordmanager__readcommand__numtokens.numtokens.int__content <= (Integer.length (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last))) ) /\ (forall index [#"passwordmanager.ads" 13 0 0]  [@model_trace:2692] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) + (Passwordmanager__readcommand__numtokens.numtokens.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:2717] [@GP_Sloc:passwordmanager.ads:15:12] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first Passwordmanager__readcommand__c.c)) ) /\ ( [@GP_Pretty_Ada:2727] [@GP_Sloc:passwordmanager.ads:15:42] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Sloc:passwordmanager.ads:15:71] [@GP_Pretty_Ada:2737] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last Passwordmanager__readcommand__c.c) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:11 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Passwordmanager__readcommand__c.c True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Passwordmanager__readcommand__numtokens.numtokens.int__content True False True True) };
   assume {  ( (if (False) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)))) /\ (forall temp___233   : int.
   (if (( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= temp___233) /\ (temp___233 <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content temp___233) True False True True)) else true)) ) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((if (((  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__c.c in (
   ()))
   in () end ;
  (Standard__string.length(Passwordmanager__readcommand__c.c)) ) > (0 : int))) then (
   ((  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__c.c in (
    ()))
    in () end ;
   (Standard__string.first(Passwordmanager__readcommand__c.c)) ) <= (  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__c.c in (
    ()))
    in () end ;
   (Standard__string.last(Passwordmanager__readcommand__c.c)) ))) else (
   (Boolean.of_int((1 : int)))))) (((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
   ()))
   in () end ;
  Passwordmanager__readcommand__t.t__last ))) >= (Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
   ()))
   in () end ;
  Passwordmanager__readcommand__t.t__first )))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:11 *)
  ;
   assume {  ( (if (((Standard__string.length Passwordmanager__readcommand__c.c) > (0 : int))) then (
   ( [@GP_Pretty_Ada:2670] ((Standard__string.first Passwordmanager__readcommand__c.c) <= (Standard__string.last Passwordmanager__readcommand__c.c)) )) else (
   ( [@GP_Pretty_Ada:24116] true ))) /\ ( [@GP_Pretty_Ada:2679] ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last) >= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first)) ) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 7 0 0] ());
   ([#"passwordmanager.adb" 7 0 0] ());
   ([#"passwordmanager.adb" 9 0 0] ( (let passwordmanager__readcommand__tokens__assume = (Mystringtokeniser__tokenarray.of_array(Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__t.t__first))) ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__t.t__last)))) in (
    ( [#"passwordmanager.adb" 9 0 0] (Passwordmanager__readcommand__tokens.tokens.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Mystringtokeniser__tokenarray.to_array(passwordmanager__readcommand__tokens__assume)) ));
    [#"passwordmanager.adb" 9 0 0] assume { [#"passwordmanager.adb" 9 0 0] ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__tokens.tokens__first)) = (Mystringtokeniser__tokenarray.first(passwordmanager__readcommand__tokens__assume))) };
    [#"passwordmanager.adb" 9 0 0] assume { [#"passwordmanager.adb" 9 0 0] ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__tokens.tokens__last)) = (Mystringtokeniser__tokenarray.last(passwordmanager__readcommand__tokens__assume))) } )))
   ;
   [#"passwordmanager.adb" 9 0 0] assume { [#"passwordmanager.adb" 9 0 0] ( (if (False) then (
    true) else (
    (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Passwordmanager__readcommand__tokens.tokens__first) (Standard__integer__rep.to_rep Passwordmanager__readcommand__tokens.tokens__last)))) /\ (forall temp___229 [#"passwordmanager.adb" 9 0 0]  : int.
    (if (( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__tokens.tokens__first) <= temp___229) /\ (temp___229 <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__tokens.tokens__last)) )) then (
     (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__tokens.tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___229) True False True True)) else true)) ) } ));
   ();
   ( [@GP_Sloc:passwordmanager.adb:11:10] ([#"passwordmanager.adb" 11 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:11:26] ([#"passwordmanager.adb" 11 0 0] ()) );
   ( [@GP_Sloc:passwordmanager.adb:11:7] ([#"passwordmanager.adb" 11 0 0] (if (( ([#"passwordmanager.adb" 11 0 0] [#"passwordmanager.adb" 11 0 0] (([@branch_id=2375] Main.spark__branch).bool__content <- ( ((Standard__integer__rep.to_rep(( [#"passwordmanager.adb" 11 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__tokens.tokens.Array__Int__Mystringtokeniser__tokenextent.map__content in (
    ()))
    in () end ;
   Passwordmanager__readcommand__tokens.tokens__first ))) <= (Standard__integer__rep.to_rep(( [#"passwordmanager.adb" 11 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__tokens.tokens.Array__Int__Mystringtokeniser__tokenextent.map__content in (
    ()))
    in () end ;
   Passwordmanager__readcommand__tokens.tokens__last )))) )));
   ( [@branch_id=2375] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:12:40] ([#"passwordmanager.adb" 12 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:12:27] ([#"passwordmanager.adb" 12 0 0] ()) );
    ( [@GP_Sloc:passwordmanager.adb:12:27] ([#"passwordmanager.adb" 12 0 0] ( ([#"passwordmanager.adb" 12 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__call_tokenise] [@GP_Sloc:passwordmanager.adb:12:27] [@comment:         MyStringTokeniser.Tokenise(C, Tokens, NumTokens);                           ^ passwordmanager.adb:12:27:VC_PRECONDITION] [@GP_Id:0] (Mystringtokeniser__tokenise___axiom.tokenise(Passwordmanager__readcommand__c.c) (Passwordmanager__readcommand__tokens.tokens) (Passwordmanager__readcommand__tokens.tokens__first) (Passwordmanager__readcommand__tokens.tokens__last) (Passwordmanager__readcommand__numtokens.numtokens)) )) )) );
    ( [@GP_Sloc:passwordmanager.adb:13:10] ([#"passwordmanager.adb" 13 0 0] (if (( ([#"passwordmanager.adb" 13 0 0] [#"passwordmanager.adb" 13 0 0] (([@branch_id=2391] Main.spark__branch).bool__content <- ( (Passwordmanager__readcommand__numtokens.numtokens.int__content <> (0 : int)) )));
    ( [@branch_id=2391] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:passwordmanager.adb:14:17] ([#"passwordmanager.adb" 14 0 0] ()) );
     ( [@GP_Sloc:passwordmanager.adb:14:14] ([#"passwordmanager.adb" 14 0 0] [#"passwordmanager.adb" 14 0 0] (Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___231 [@mlw:proxy_symbol] [@introduced] = (let temp___230 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(Passwordmanager__readcommand__tokens.tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__tokens.tokens__first))) ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__tokens.tokens__last)))) in (
      ( [#"passwordmanager.adb" 14 0 0] assert { [#"passwordmanager.adb" 14 0 0] ([#"passwordmanager.adb" 14 0 0] ( [@GP_Shape:if__if__t_assign] [@vc:annotation] [@comment:            T:= Tokens;              ^ passwordmanager.adb:14:14:VC_LENGTH_CHECK] [@GP_Sloc:passwordmanager.adb:14:14] [@GP_Id:1] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Mystringtokeniser__tokenarray.first temp___230) <= (Mystringtokeniser__tokenarray.last temp___230))) then (
       ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) /\ (((Mystringtokeniser__tokenarray.last temp___230) - (Mystringtokeniser__tokenarray.first temp___230)) = ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last) - (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first))) )) else (
       ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last) < (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first)))) ) )) };
      temp___230 )))
      in (
      (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___231) (Mystringtokeniser__tokenarray.first temp___231) (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first))))
      ))) ) )) else (
     ()))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Passwordmanager__readcommand__numtokens.numtokens.int__content <= ([#"passwordmanager.ads" 13 0 0] ( [@GP_Shape:pragargs__and__cmp__typeconv__length_ref] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => NumTokens <= T'Length and                            ^ passwordmanager.ads:13:28:VC_RANGE_CHECK] [@GP_Id:2] [@GP_Sloc:passwordmanager.ads:13:28] (Standard__integer.range_check_(( [#"passwordmanager.ads" 13 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
   ()))
   in () end ;
  (Integer.length((Standard__integer__rep.to_rep(Passwordmanager__readcommand__t.t__first))) ((Standard__integer__rep.to_rep(Passwordmanager__readcommand__t.t__last)))) ))) )))) (( (let index =  (val _f : int
  in _f) in (
   (if ((Boolean.andb(((Standard__integer__rep.to_rep((  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
    ()))
    in () end ;
   Passwordmanager__readcommand__t.t__first ))) <= index)) ((index <= ([#"passwordmanager.ads" 14 0 0] ( [@GP_Shape:pragargs__and__forall__range__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:passwordmanager.ads:14:40] [@comment:     (for all Index in T'First..T'First+(NumTokens -1) =>                                        ^ passwordmanager.ads:14:40:VC_OVERFLOW_CHECK] [@GP_Id:3] (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( [#"passwordmanager.ads" 14 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
    ()))
    in () end ;
   Passwordmanager__readcommand__t.t__first ))) + (Passwordmanager__readcommand__numtokens.numtokens.int__content - (1 : int))))) )))))) then (
     begin ensures {true} let _ = (let _ = ( (Boolean.andb(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((  assert {  ([#"passwordmanager.ads" 15 0 0] ( [@comment:          (T(Index).Start >= C'First and T(Index).Length>0 ) and then T(Index).Length - 1 <= C'Last - T(Index).Start              ^ passwordmanager.ads:15:14:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:pragargs__and__forall__andthen__and__cmp__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:passwordmanager.ads:15:14] [@GP_Id:4] ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) ) )) };
    index ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) >= (  begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__c.c in (
     ()))
     in () end ;
    (Standard__string.first(Passwordmanager__readcommand__c.c)) ))) (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((  assert {  ([#"passwordmanager.ads" 15 0 0] ( [@GP_Sloc:passwordmanager.ads:15:44] [@vc:annotation] [@comment:          (T(Index).Start >= C'First and T(Index).Length>0 ) and then T(Index).Length - 1 <= C'Last - T(Index).Start                                            ^ passwordmanager.ads:15:44:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__forall__andthen__and__cmp__selectcomp__ixdcomp] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:5] ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) ) )) };
    index ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) > (0 : int)))) && (((Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((  assert {  ([#"passwordmanager.ads" 15 0 0] ( [@comment:          (T(Index).Start >= C'First and T(Index).Length>0 ) and then T(Index).Length - 1 <= C'Last - T(Index).Start                                                                         ^ passwordmanager.ads:15:73:VC_INDEX_CHECK] [@GP_Sloc:passwordmanager.ads:15:73] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:6] [@GP_Shape:pragargs__and__forall__andthen__cmp__sub__selectcomp__ixdcomp] ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) ) )) };
    index ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length)) - (1 : int)) <= ([#"passwordmanager.ads" 15 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:          (T(Index).Start >= C'First and T(Index).Length>0 ) and then T(Index).Length - 1 <= C'Last - T(Index).Start                                                                                                     ^ passwordmanager.ads:15:101:VC_OVERFLOW_CHECK] [@GP_Sloc:passwordmanager.ads:15:101] [@GP_Shape:pragargs__and__forall__andthen__cmp__sub] [@GP_Id:8] (Standard__integer.range_check_((( [#"passwordmanager.ads" 15 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__readcommand__c.c in (
     ()))
     in () end ;
    (Standard__string.last(Passwordmanager__readcommand__c.c)) ) - (Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) (( [#"passwordmanager.ads" 15 0 0] assert { [#"passwordmanager.ads" 15 0 0] ([#"passwordmanager.ads" 15 0 0] ( [@comment:          (T(Index).Start >= C'First and T(Index).Length>0 ) and then T(Index).Length - 1 <= C'Last - T(Index).Start                                                                                                         ^ passwordmanager.ads:15:105:VC_INDEX_CHECK] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:7] [@GP_Sloc:passwordmanager.ads:15:105] [@GP_Shape:pragargs__and__forall__andthen__cmp__sub__selectcomp__ixdcomp] ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= (Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__last)) ) )) };
    index ))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))))) ))) ) in (
     ()))
     in () end ))))
  ;
   (val _f : bool
  ensures { ( (result = True) <-> (forall index   [@model_trace:2692] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep Passwordmanager__readcommand__t.t__first) + (Passwordmanager__readcommand__numtokens.numtokens.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:2717] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first Passwordmanager__readcommand__c.c)) ) /\ ( [@GP_Pretty_Ada:2727] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:2737] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last Passwordmanager__readcommand__c.c) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get Passwordmanager__readcommand__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) )} 
  in _f) ))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unlock" defined at passwordmanager.ads:18, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passwordmanager__unlock__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Passwordmanager__unlock__p1 as Passwordmanager__unlock__p1
 use        Passwordmanager__unlock__p2 as Passwordmanager__unlock__p2
 use        Passwordmanager__unlock__islocked as Passwordmanager__unlock__islocked
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Passwordmanager__unlock__p1___axiom as Passwordmanager__unlock__p1___axiom
 use        Passwordmanager__unlock__p2___axiom as Passwordmanager__unlock__p2___axiom
 use        Passwordmanager__unlock__islocked___axiom as Passwordmanager__unlock__islocked___axiom
 use        Pin__pin___axiom as Pin__pin___axiom

 let def [#"passwordmanager.ads" 18 0 0][@GP_Subp:passwordmanager.ads:18] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 18 0 0] true }
  ensures { [#"passwordmanager.ads" 18 0 0] ([#"passwordmanager.ads" 20 0 0] ( [@GP_Id:10] [@comment:     Post => (if P1 = P2 then (isLocked = False));              ^ passwordmanager.ads:20:14:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:passwordmanager.ads:20:14] [@GP_Shape:pragargs__if] (if ((Passwordmanager__unlock__p1.p1 = Passwordmanager__unlock__p2.p2)) then (
   ( [@GP_Pretty_Ada:2800] [@GP_Sloc:passwordmanager.ads:20:31] ( (Passwordmanager__unlock__islocked.islocked.bool__content = True) <-> false ) )) else (
   ( [@GP_Pretty_Ada:24181] [@GP_Sloc:passwordmanager.ads:20:15] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:18 *)
  ;
   assume {  (Pin__pin___axiom.dynamic_invariant Passwordmanager__unlock__p1.p1 True False True True) };
   assume {  (Pin__pin___axiom.dynamic_invariant Passwordmanager__unlock__p2.p2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:18 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:18 *)
  ;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int(Passwordmanager__unlock__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:18 *)
  ;
   assume {  ( [@GP_Pretty_Ada:23968] ( (Passwordmanager__unlock__islocked.islocked.bool__content = True) <-> true ) ) };
   try
   ( ();
   ( [@GP_Sloc:passwordmanager.adb:21:7] ([#"passwordmanager.adb" 21 0 0] (if (( ([#"passwordmanager.adb" 21 0 0] [#"passwordmanager.adb" 21 0 0] (([@branch_id=2440] Main.spark__branch).bool__content <- ( (Passwordmanager__unlock__p1.p1 = Passwordmanager__unlock__p2.p2) )));
   ( [@branch_id=2440] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:22:19] ([#"passwordmanager.adb" 22 0 0] [#"passwordmanager.adb" 22 0 0] (Passwordmanager__unlock__islocked.islocked.bool__content <- ( (Boolean.of_int((0 : int))) ))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if ((Passwordmanager__unlock__p1.p1 = Passwordmanager__unlock__p2.p2)) then (
   ((Boolean.to_int(Passwordmanager__unlock__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int))))))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lock" defined at passwordmanager.ads:22, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passwordmanager__lock__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Passwordmanager__lock__islocked as Passwordmanager__lock__islocked
 use        Passwordmanager__lock__islocked___axiom as Passwordmanager__lock__islocked___axiom

 let def [#"passwordmanager.ads" 22 0 0][@GP_Subp:passwordmanager.ads:22] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 22 0 0] true }
  ensures { [#"passwordmanager.ads" 22 0 0] ([#"passwordmanager.ads" 24 0 0] ( [@GP_Id:11] [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@GP_Sloc:passwordmanager.ads:24:14] [@model_vc_post] [@comment:     Post => isLocked = True;              ^ passwordmanager.ads:24:14:VC_POSTCONDITION] ( [@GP_Pretty_Ada:24017] [@GP_Sloc:passwordmanager.ads:24:14] ( (Passwordmanager__lock__islocked.islocked.bool__content = True) <-> true ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:22 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:22 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:22 *)
  ;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int(Passwordmanager__lock__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:22 *)
  ;
   assume {  ( [@GP_Pretty_Ada:24007] ( (Passwordmanager__lock__islocked.islocked.bool__content = True) <-> false ) ) };
   try
   ( ();
   ( [@GP_Sloc:passwordmanager.adb:28:7] ([#"passwordmanager.adb" 28 0 0] (if (( ([#"passwordmanager.adb" 28 0 0] [#"passwordmanager.adb" 28 0 0] (([@branch_id=2468] Main.spark__branch).bool__content <- ( ((Boolean.to_int(Passwordmanager__lock__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((0 : int)))))) )));
   ( [@branch_id=2468] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:29:19] ([#"passwordmanager.adb" 29 0 0] [#"passwordmanager.adb" 29 0 0] (Passwordmanager__lock__islocked.islocked.bool__content <- ( (Boolean.of_int((1 : int))) ))) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Boolean.to_int(Passwordmanager__lock__islocked.islocked.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int)))))) in (
   ()))
   in () end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "ispin" defined at passwordmanager.ads:26, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Passwordmanager__ispin__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Passwordmanager__ispin__input as Passwordmanager__ispin__input
 use        Passwordmanager__ispin__ch as Passwordmanager__ispin__ch
 use        Passwordmanager__ispin__L_1__k as Passwordmanager__ispin__L_1__k
 use        Passwordmanager__ispin__L_1 as Passwordmanager__ispin__L_1
 use        Passwordmanager__ispin__L_1__T5b as Passwordmanager__ispin__L_1__T5b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Passwordmanager__ispin__ch___axiom as Passwordmanager__ispin__ch___axiom
 use        Passwordmanager__ispin__L_1__k___axiom as Passwordmanager__ispin__L_1__k___axiom
 use        Passwordmanager__ispin__L_1___axiom as Passwordmanager__ispin__L_1___axiom
 use        Passwordmanager__ispin__input___axiom as Passwordmanager__ispin__input___axiom
 use        Passwordmanager__ispin__L_1__T5b___axiom as Passwordmanager__ispin__L_1__T5b___axiom

 val passwordmanager__ispin__result [@name:IsPin] [@model_trace:2832@result] [@model_projected]  : bool__ref 
 
 let def [#"passwordmanager.ads" 26 0 0][@GP_Subp:passwordmanager.ads:26] 
   (__void_param : unit)
  requires { [#"passwordmanager.ads" 26 0 0] true }
  ensures { [#"passwordmanager.ads" 26 0 0] ([#"passwordmanager.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:passwordmanager.ads:28:15] [@GP_Id:17] [@comment:     post =>  (if IsPin'Result = True then               ^ passwordmanager.ads:28:15:VC_POSTCONDITION] [@model_vc_post] [@GP_Shape:pragargs__and] ( (if (( (passwordmanager__ispin__result.bool__content = True) <-> true )) then (
   (forall i [#"passwordmanager.ads" 28 0 0]  [@name:I] [@model_trace:2870]  : int.
    ( ( ((Standard__string.first Passwordmanager__ispin__input.input) <= i) /\ (i <= (Standard__string.last Passwordmanager__ispin__input.input)) ) -> ( ( ( [@GP_Pretty_Ada:2889] [@GP_Sloc:passwordmanager.ads:30:24] ((Standard__string.first Passwordmanager__ispin__input.input) <= (Standard__string.last Passwordmanager__ispin__input.input)) ) /\ ( [@GP_Sloc:passwordmanager.ads:31:28] [@GP_Pretty_Ada:2897] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) i)) >= (48 : int)) ) ) /\ ( [@GP_Sloc:passwordmanager.ads:32:28] [@GP_Pretty_Ada:2903] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) i)) <= (57 : int)) ) ) ))) else (
   ( [@GP_Sloc:passwordmanager.ads:28:16] [@GP_Pretty_Ada:24230] true ))) /\ (if (( (passwordmanager__ispin__result.bool__content = True) <-> true )) then (
   ( [@GP_Pretty_Ada:2915] [@GP_Sloc:passwordmanager.ads:33:37] ((Standard__string.length Passwordmanager__ispin__input.input) = (4 : int)) )) else (
   ( [@GP_Pretty_Ada:24236] [@GP_Sloc:passwordmanager.ads:33:9] true ))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram passwordmanager.ads:26 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Passwordmanager__ispin__input.input True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram passwordmanager.ads:26 *)
  ;
  () (* Check for RTE in the Pre of the subprogram passwordmanager.ads:26 *)
  ;
   begin ensures {true} let _ = (let _ = ((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
   ()))
   in () end ;
  (Standard__string.first(Passwordmanager__ispin__input.input)) ) <= (  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
   ()))
   in () end ;
  (Standard__string.last(Passwordmanager__ispin__input.input)) )) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram passwordmanager.ads:26 *)
  ;
   assume {  ( [@GP_Pretty_Ada:24044] ((Standard__string.first Passwordmanager__ispin__input.input) <= (Standard__string.last Passwordmanager__ispin__input.input)) ) };
   try
   ( ();
   ([#"passwordmanager.adb" 33 0 0] ());
   ([#"passwordmanager.adb" 34 0 0] ( [#"passwordmanager.adb" 34 0 0] assume { [#"passwordmanager.adb" 34 0 0] (Standard__character___axiom.default_initial_assumption Passwordmanager__ispin__ch.ch.int__content False) };
   [#"passwordmanager.adb" 34 0 0] assume { [#"passwordmanager.adb" 34 0 0] (Standard__character___axiom.dynamic_invariant Passwordmanager__ispin__ch.ch.int__content False False True True) } ));
   ([#"passwordmanager.adb" 40 0 0] ());
   ();
   ( [@GP_Sloc:passwordmanager.adb:36:7] ([#"passwordmanager.adb" 36 0 0] (if (( ([#"passwordmanager.adb" 36 0 0] [#"passwordmanager.adb" 36 0 0] (([@branch_id=2508] Main.spark__branch).bool__content <- ( (( [#"passwordmanager.adb" 36 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
    ()))
    in () end ;
   (Standard__string.length(Passwordmanager__ispin__input.input)) ) <> (4 : int)) )));
   ( [@branch_id=2508] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:passwordmanager.adb:37:10] ([#"passwordmanager.adb" 37 0 0] ( [#"passwordmanager.adb" 37 0 0] (passwordmanager__ispin__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"passwordmanager.adb" 37 0 0] raise Return__exc )) ) )) else (
    ()))) );
   ( [@GP_Sloc:passwordmanager.adb:40:28] ([#"passwordmanager.adb" 40 0 0] (let temp___236 [@mlw:proxy_symbol] [@introduced] = ( [#"passwordmanager.adb" 40 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
    ()))
    in () end ;
   (Standard__string.first(Passwordmanager__ispin__input.input)) ) in (
   (let temp___237 [@mlw:proxy_symbol] [@introduced] = ( [#"passwordmanager.adb" 40 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
    ()))
    in () end ;
   (Standard__string.last(Passwordmanager__ispin__input.input)) ) in (
    ( [#"passwordmanager.adb" 40 0 0] (Passwordmanager__ispin__L_1__k.k.int__content <- ( temp___236 ));
    () (* Translation of an Ada loop from passwordmanager.adb:40 *)
    ;
    (if ((Boolean.andb((temp___236 <= Passwordmanager__ispin__L_1__k.k.int__content)) ((Passwordmanager__ispin__L_1__k.k.int__content <= temp___237)))) then (
     [#"passwordmanager.adb" 40 0 0] try
      ( [#"passwordmanager.adb" 40 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__ispin__L_1__k.k.int__content in (
       ()))
       in () end ;
      (let temp___239 [@mlw:proxy_symbol] [@introduced] = [#"passwordmanager.adb" 40 0 0] (val _f : int
      ensures {[#"passwordmanager.adb" 40 0 0] (result = Passwordmanager__ispin__L_1__k.k.int__content)} 
      in _f) in (
       ( [#"passwordmanager.adb" 40 0 0] begin ensures {true} let _ = (let _ = Passwordmanager__ispin__ch.ch.int__content in (
        ()))
        in () end ;
       (let temp___238 [@mlw:proxy_symbol] [@introduced] = [#"passwordmanager.adb" 40 0 0] (val _f : int
       ensures {[#"passwordmanager.adb" 40 0 0] (result = Passwordmanager__ispin__ch.ch.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop passwordmanager.adb:40 *)
        ;
        ();
        ( [@GP_Sloc:passwordmanager.adb:41:10] ([#"passwordmanager.adb" 41 0 0] ()) );
        ( [@GP_Sloc:passwordmanager.adb:41:13] ([#"passwordmanager.adb" 41 0 0] [#"passwordmanager.adb" 41 0 0] (Passwordmanager__ispin__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) (Passwordmanager__ispin__L_1__k.k.int__content)))) ))) );
        ( [@GP_Sloc:passwordmanager.adb:42:13] ([#"passwordmanager.adb" 42 0 0] ()) );
        ( [@GP_Sloc:passwordmanager.adb:42:10] ([#"passwordmanager.adb" 42 0 0] (if (( ([#"passwordmanager.adb" 42 0 0] [#"passwordmanager.adb" 42 0 0] (([@branch_id=2538] Main.spark__branch).bool__content <- ( not ( (Boolean.andb(((48 : int) <= Passwordmanager__ispin__ch.ch.int__content)) ((Passwordmanager__ispin__ch.ch.int__content <= (57 : int)))) ) )));
        ( [@branch_id=2538] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:passwordmanager.adb:43:13] ([#"passwordmanager.adb" 43 0 0] ( [#"passwordmanager.adb" 43 0 0] (passwordmanager__ispin__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"passwordmanager.adb" 43 0 0] raise Return__exc )) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from passwordmanager.adb:40 *)
        ;
        (let temp___inv_240 [@mlw:proxy_symbol] [@introduced] = ( (let q =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
          ()))
          in () end ;
         (Standard__string.first(Passwordmanager__ispin__input.input)) ) <= q)) ((q <= Passwordmanager__ispin__L_1__k.k.int__content)))) then (
           begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.adb" 46 0 0] ( [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:passwordmanager.adb:46:42] [@GP_Shape:L_1_while__pragargs__forall__and__cmp__ixdcomp] [@comment:                                  (input(q) >= '0'                                          ^ passwordmanager.adb:46:42:VC_INDEX_CHECK] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
          q ))))) >= (48 : int))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.adb" 47 0 0] ( [@GP_Id:13] [@GP_Sloc:passwordmanager.adb:47:46] [@vc:annotation] [@comment:                                   and input(q) <= '9'));                                              ^ passwordmanager.adb:47:46:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__and__cmp__ixdcomp] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
          q ))))) <= (57 : int)))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall q   [@model_trace:2552] [@name:q]  : int.
         ( ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= Passwordmanager__ispin__L_1__k.k.int__content) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) >= (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) <= (57 : int)) ) )) )} 
        in _f) ) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
         while True do
         invariant { 
          ([#"passwordmanager.adb" 45 0 0] ( [@GP_Id:14] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__forall] [@comment:         pragma Loop_Invariant (for all q in Input'First..K =>                                 ^ passwordmanager.adb:45:33:VC_LOOP_INVARIANT] [@GP_Sloc:passwordmanager.adb:45:33] (forall q [#"passwordmanager.adb" 45 0 0]  [@model_trace:2552] [@name:q]  : int.
           ( ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= Passwordmanager__ispin__L_1__k.k.int__content) ) -> ( ( [@GP_Sloc:passwordmanager.adb:46:36] [@GP_Pretty_Ada:2569] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) >= (48 : int)) ) /\ ( [@GP_Sloc:passwordmanager.adb:47:40] [@GP_Pretty_Ada:2575] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) <= (57 : int)) ) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop passwordmanager.adb:40 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (Standard__character___axiom.dynamic_invariant Passwordmanager__ispin__ch.ch.int__content False True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Passwordmanager__ispin__input.input) <= (Standard__string.last Passwordmanager__ispin__input.input)) )) then (
          (Passwordmanager__ispin__L_1__T5b.dynamic_property (Standard__string.first Passwordmanager__ispin__input.input) (Standard__string.last Passwordmanager__ispin__input.input) Passwordmanager__ispin__L_1__k.k.int__content)) else true) )/\true )) (( ((Standard__string.first Passwordmanager__ispin__input.input) <= Passwordmanager__ispin__L_1__k.k.int__content) /\ (Passwordmanager__ispin__L_1__k.k.int__content <= (Standard__string.last Passwordmanager__ispin__input.input)) ))) };
         () (* Check for absence of RTE in the invariant of loop passwordmanager.adb:40 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop passwordmanager.adb:40 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop passwordmanager.adb:40 *)
         ;
         (if ((Passwordmanager__ispin__L_1__k.k.int__content = temp___237)) then (
           raise Passwordmanager__ispin__L_1.L_1));
         ([#"passwordmanager.adb" 40 0 0] [#"passwordmanager.adb" 40 0 0] (Passwordmanager__ispin__L_1__k.k.int__content <- ( (Passwordmanager__ispin__L_1__k.k.int__content + (1 : int)) )));
         ();
         ( [@GP_Sloc:passwordmanager.adb:41:10] ([#"passwordmanager.adb" 41 0 0] ()) );
         ( [@GP_Sloc:passwordmanager.adb:41:13] ([#"passwordmanager.adb" 41 0 0] [#"passwordmanager.adb" 41 0 0] (Passwordmanager__ispin__ch.ch.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) (Passwordmanager__ispin__L_1__k.k.int__content)))) ))) );
         ( [@GP_Sloc:passwordmanager.adb:42:13] ([#"passwordmanager.adb" 42 0 0] ()) );
         ( [@GP_Sloc:passwordmanager.adb:42:10] ([#"passwordmanager.adb" 42 0 0] (if (( ([#"passwordmanager.adb" 42 0 0] [#"passwordmanager.adb" 42 0 0] (([@branch_id=2538] Main.spark__branch).bool__content <- ( not ( (Boolean.andb(((48 : int) <= Passwordmanager__ispin__ch.ch.int__content)) ((Passwordmanager__ispin__ch.ch.int__content <= (57 : int)))) ) )));
         ( [@branch_id=2538] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:passwordmanager.adb:43:13] ([#"passwordmanager.adb" 43 0 0] ( [#"passwordmanager.adb" 43 0 0] (passwordmanager__ispin__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
          [#"passwordmanager.adb" 43 0 0] raise Return__exc )) ) )) else (
          ()))) );
         (let temp___inv_240 [@mlw:proxy_symbol] [@introduced] = ( (let q =  (val _f : int
         in _f) in (
          (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
           ()))
           in () end ;
          (Standard__string.first(Passwordmanager__ispin__input.input)) ) <= q)) ((q <= Passwordmanager__ispin__L_1__k.k.int__content)))) then (
            begin ensures {true} let _ = (let _ = (Boolean.andb(((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.adb" 46 0 0] ( [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:passwordmanager.adb:46:42] [@GP_Shape:L_1_while__pragargs__forall__and__cmp__ixdcomp] [@comment:                                  (input(q) >= '0'                                          ^ passwordmanager.adb:46:42:VC_INDEX_CHECK] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
           q ))))) >= (48 : int))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.adb" 47 0 0] ( [@GP_Id:13] [@GP_Sloc:passwordmanager.adb:47:46] [@vc:annotation] [@comment:                                   and input(q) <= '9'));                                              ^ passwordmanager.adb:47:46:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:L_1_while__pragargs__forall__and__cmp__ixdcomp] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
           q ))))) <= (57 : int)))) in (
            ()))
            in () end ))))
         ;
          (val _f : bool
         ensures { ( (result = True) <-> (forall q   [@model_trace:2552] [@name:q]  : int.
          ( ( ((Standard__string.first Passwordmanager__ispin__input.input) <= q) /\ (q <= Passwordmanager__ispin__L_1__k.k.int__content) ) -> ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) >= (48 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) q)) <= (57 : int)) ) )) )} 
         in _f) ) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )))
       )
     with
      Passwordmanager__ispin__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:passwordmanager.adb:50:7] ([#"passwordmanager.adb" 50 0 0] ( [#"passwordmanager.adb" 50 0 0] (passwordmanager__ispin__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
   [#"passwordmanager.adb" 50 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((if (((Boolean.to_int(passwordmanager__ispin__result.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int))))))) then (
   ( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
     ()))
     in () end ;
    (Standard__string.first(Passwordmanager__ispin__input.input)) ) <= i)) ((i <= (  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
     ()))
     in () end ;
    (Standard__string.last(Passwordmanager__ispin__input.input)) ))))) then (
      begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb(((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
      ()))
      in () end ;
     (Standard__string.first(Passwordmanager__ispin__input.input)) ) <= (  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
      ()))
      in () end ;
     (Standard__string.last(Passwordmanager__ispin__input.input)) ))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.ads" 31 0 0] ( [@GP_Id:15] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                       and input(I) >='0'                                  ^ passwordmanager.ads:31:34:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__if__forall__and__and__cmp__ixdcomp] [@GP_Sloc:passwordmanager.ads:31:34] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= i) /\ (i <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
     i ))))) >= (48 : int))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Passwordmanager__ispin__input.input))) ((  assert {  ([#"passwordmanager.ads" 32 0 0] ( [@GP_Id:16] [@GP_Sloc:passwordmanager.ads:32:34] [@vc:annotation] [@comment:                       and Input(I) <= '9'))) and                                   ^ passwordmanager.ads:32:34:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:pragargs__and__if__forall__and__cmp__ixdcomp] ( ((Standard__string.first Passwordmanager__ispin__input.input) <= i) /\ (i <= (Standard__string.last Passwordmanager__ispin__input.input)) ) )) };
     i ))))) <= (57 : int)))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@name:I] [@model_trace:2870]  : int.
    ( ( ((Standard__string.first Passwordmanager__ispin__input.input) <= i) /\ (i <= (Standard__string.last Passwordmanager__ispin__input.input)) ) -> ( ( ( [@GP_Pretty_Ada:2889] ((Standard__string.first Passwordmanager__ispin__input.input) <= (Standard__string.last Passwordmanager__ispin__input.input)) ) /\ ( [@GP_Pretty_Ada:2897] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) i)) >= (48 : int)) ) ) /\ ( [@GP_Pretty_Ada:2903] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Passwordmanager__ispin__input.input) i)) <= (57 : int)) ) ) )) )} 
   in _f) )) else (
   (Boolean.of_int((1 : int)))))) ((if (((Boolean.to_int(passwordmanager__ispin__result.bool__content)) = (Boolean.to_int((Boolean.of_int((1 : int))))))) then (
   ((  begin ensures {true} let _ = (let _ = Passwordmanager__ispin__input.input in (
    ()))
    in () end ;
   (Standard__string.length(Passwordmanager__ispin__input.input)) ) = (4 : int))) else (
   (Boolean.of_int((1 : int))))))) in (
   ()))
   in () end ;
  passwordmanager__ispin__result.bool__content )
end
