(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "Tstack_dataD1" defined at stack.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Stack__Tstack_dataD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tstack_dataD1 =
  < range 1 1000 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tstack_dataD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstack_dataD1__ref =
  { mutable tstack_dataD1__content : tstack_dataD1 }
 
 function tstack_dataD1__ref_tstack_dataD1__content__projection 
   (a : tstack_dataD1__ref) : tstack_dataD1 =
  a.tstack_dataD1__content
 
 meta "model_projection" function tstack_dataD1__ref_tstack_dataD1__content__projection
 
 meta "inline:no" function tstack_dataD1__ref_tstack_dataD1__content__projection
 
 val tstack_dataD1__havoc 
   (x : tstack_dataD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tstack_dataD1" defined at stack.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Stack__Tstack_dataD1__rep
 use        Stack__Tstack_dataD1 as Stack__Tstack_dataD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__Tstack_dataD1.tstack_dataD1) : int =
  (Stack__Tstack_dataD1.tstack_dataD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__Tstack_dataD1.tstack_dataD1, 
 predicate in_range = Stack__Tstack_dataD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tstack_dataB" defined at stack.ads:43, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tstack_dataB" defined at stack.ads:43, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tstack_dataB" defined at stack.ads:43, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Tstack_dataB" defined at stack.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Stack__Tstack_dataB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep
 use        Stack__Tstack_dataD1 as Stack__Tstack_dataD1
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stack__Tstack_dataD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tstack_dataB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tstack_dataB__ref =
  { mutable tstack_dataB__content : tstack_dataB }
 
 function tstack_dataB__ref_tstack_dataB__content__projection 
   (a : tstack_dataB__ref) : tstack_dataB =
  a.tstack_dataB__content
 
 meta "model_projection" function tstack_dataB__ref_tstack_dataB__content__projection
 
 meta "inline:no" function tstack_dataB__ref_tstack_dataB__content__projection
 
 val tstack_dataB__havoc 
   (x : tstack_dataB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stack_data" defined at stack.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_data
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "stack_type" defined at stack.ads:45, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Stack__stack_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Stack__stack_data as Stack__stack_data
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 type __split_fields =
  { rec__stack__stack_type__size [@name:Size] [@model_trace:.3303] : Standard__natural.natural; rec__stack__stack_type__data [@name:Data] [@model_trace:.3314] : Array__Int__Standard__integer.map }
 
 function __split_fields_rec__stack__stack_type__size__projection [@name:Size] [@model_trace:.3303] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__stack__stack_type__size
 
 meta "model_projection" function __split_fields_rec__stack__stack_type__size__projection
 
 meta "inline:no" function __split_fields_rec__stack__stack_type__size__projection
 
 function __split_fields_rec__stack__stack_type__data__projection [@name:Data] [@model_trace:.3314] 
   (a : __split_fields) : Array__Int__Standard__integer.map =
  a.rec__stack__stack_type__data
 
 meta "model_projection" function __split_fields_rec__stack__stack_type__data__projection
 
 meta "inline:no" function __split_fields_rec__stack__stack_type__data__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate stack__stack_type__size__pred 
   (a : __rep) =
  true
 val stack__stack_type__size__pred 
   (a : __rep) : bool
  ensures { result <-> stack__stack_type__size__pred (a : __rep) }
 
 val rec__stack__stack_type__size_ 
   (a : __rep) : Standard__natural.natural
  requires {  (stack__stack_type__size__pred a) }
  ensures {  (result = a.__split_fields.rec__stack__stack_type__size) }
 
 predicate stack__stack_type__data__pred 
   (a : __rep) =
  true
 val stack__stack_type__data__pred 
   (a : __rep) : bool
  ensures { result <-> stack__stack_type__data__pred (a : __rep) }
 
 val rec__stack__stack_type__data_ 
   (a : __rep) : Array__Int__Standard__integer.map
  requires {  (stack__stack_type__data__pred a) }
  ensures {  (result = a.__split_fields.rec__stack__stack_type__data) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__natural__rep.to_rep a.__split_fields.rec__stack__stack_type__size) = (Standard__natural__rep.to_rep b.__split_fields.rec__stack__stack_type__size)) /\ (Stack__stack_data.bool_eq a.__split_fields.rec__stack__stack_type__data b.__split_fields.rec__stack__stack_type__data) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "stack_type" defined at stack.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Stack__stack_type
 use export Stack__stack_type__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type stack_type =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant stack__stack_type__size__first__bit 
   : int

 
 val constant stack__stack_type__size__last__bit 
   : int

 
 val constant stack__stack_type__size__position 
   : int

 
 axiom stack__stack_type__size__first__bit_axiom :
  ((stack__stack_type__size__first__bit ) >= (0 : int))
 
 axiom stack__stack_type__size__last__bit_axiom :
  ((stack__stack_type__size__last__bit ) > (stack__stack_type__size__first__bit ))
 
 axiom stack__stack_type__size__position_axiom :
  ((stack__stack_type__size__position ) >= (0 : int))
 
 val constant stack__stack_type__data__first__bit 
   : int

 
 val constant stack__stack_type__data__last__bit 
   : int

 
 val constant stack__stack_type__data__position 
   : int

 
 axiom stack__stack_type__data__first__bit_axiom :
  ((stack__stack_type__data__first__bit ) >= (0 : int))
 
 axiom stack__stack_type__data__last__bit_axiom :
  ((stack__stack_type__data__last__bit ) > (stack__stack_type__data__first__bit ))
 
 axiom stack__stack_type__data__position_axiom :
  ((stack__stack_type__data__position ) >= (0 : int))
 
 val function user_eq 
   (a : stack_type) (b : stack_type) : bool
 
 val constant dummy 
   : stack_type

 
 type stack_type__ref =
  { mutable stack_type__content : stack_type }
 
 function stack_type__ref_stack_type__content__projection 
   (a : stack_type__ref) : stack_type =
  a.stack_type__content
 
 meta "model_projection" function stack_type__ref_stack_type__content__projection
 
 meta "inline:no" function stack_type__ref_stack_type__content__projection
 
 val stack_type__havoc 
   (x : stack_type__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_size" defined at stack.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__max_size
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_size [#"stack.ads" 5 0 0][@name:Max_Size] [@model_trace:2767] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "stack" defined at stack.ads:38, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__get_size__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val constant stack [#"stack.ads" 38 0 0][@model_projected] [@name:Stack] [@model_trace:3239] 
   : Stack__stack_type.stack_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:38, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__get_size__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_size" defined at stack.ads:38, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__get_size
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val function get_size 
   (stack : Stack__stack_type.stack_type) : int
 
 val predicate get_size__function_guard 
   (temp___result_155 : int) (stack : Stack__stack_type.stack_type)

end

(* Module for axiomatizing type "T11s" defined at stack.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Stack__init_stack__L10s__T11s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t11s =
  < range 1 1000 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t11s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t11s__ref =
  { mutable t11s__content : t11s }
 
 function t11s__ref_t11s__content__projection 
   (a : t11s__ref) : t11s =
  a.t11s__content
 
 meta "model_projection" function t11s__ref_t11s__content__projection
 
 meta "inline:no" function t11s__ref_t11s__content__projection
 
 val t11s__havoc 
   (x : t11s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T11s" defined at stack.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Stack__init_stack__L10s__T11s__rep
 use        Stack__init_stack__L10s__T11s as Stack__init_stack__L10s__T11s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__init_stack__L10s__T11s.t11s) : int =
  (Stack__init_stack__L10s__T11s.t11s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__init_stack__L10s__T11s.t11s, 
 predicate in_range = Stack__init_stack__L10s__T11s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "stack" defined at stack.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__get_element__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val constant stack [#"stack.ads" 40 0 0][@model_trace:3258] [@model_projected] [@name:Stack] 
   : Stack__stack_type.stack_type

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__get_element__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at stack.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__get_element__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"stack.ads" 40 0 0][@model_trace:3267] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at stack.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__get_element__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_element" defined at stack.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__get_element
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val function get_element 
   (stack : Stack__stack_type.stack_type) (index : int) : int
 
 val predicate get_element__function_guard 
   (temp___result_156 : int) (stack : Stack__stack_type.stack_type) (index : int)

end

(* Module for defining the constant "value" defined at stack.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__push__value
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant value [#"stack.ads" 11 0 0][@model_trace:2839] [@name:Value] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "value" defined at stack.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__value___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T13s" defined at stack.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stack__push__L12s__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t13s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t13s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15s" defined at stack.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Stack__pop__L14s__T15s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t15s =
  < range 1 1000 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t15s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t15s__ref =
  { mutable t15s__content : t15s }
 
 function t15s__ref_t15s__content__projection 
   (a : t15s__ref) : t15s =
  a.t15s__content
 
 meta "model_projection" function t15s__ref_t15s__content__projection
 
 meta "inline:no" function t15s__ref_t15s__content__projection
 
 val t15s__havoc 
   (x : t15s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T15s" defined at stack.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Stack__pop__L14s__T15s__rep
 use        Stack__pop__L14s__T15s as Stack__pop__L14s__T15s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__pop__L14s__T15s.t15s) : int =
  (Stack__pop__L14s__T15s.t15s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__pop__L14s__T15s.t15s, 
 predicate in_range = Stack__pop__L14s__T15s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "variable" defined at stack.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__load__variable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant variable [#"stack.ads" 23 0 0][@model_projected] [@name:Variable] [@model_trace:3009] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "variable" defined at stack.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__load__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing the record theory associated to type "database" defined at variablestore.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__database
 use export Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "database" defined at stack.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__load__database
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant database [#"stack.ads" 23 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "database" defined at stack.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__load__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__2__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__2__projection
 
 meta "inline:no" function t13s__ref_t13s__content__2__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__mystring__T13s.t13s) : int =
  (Variablestore__variables__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__mystring__T13s.t13s, 
 predicate in_range = Variablestore__variables__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__TmystringstrD1.tmystringstrD1) : int =
  (Variablestore__variables__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Variablestore__variables__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Variablestore__variables__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__variablestore__variables__mystring__length [@name:Length] [@model_trace:.67889] : Variablestore__variables__mystring__T13s.t13s; rec__variablestore__variables__mystring__str [@model_trace:.67904] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__variablestore__variables__mystring__length__projection [@name:Length] [@model_trace:.67889] 
   (a : __split_fields) : Variablestore__variables__mystring__T13s.t13s =
  a.rec__variablestore__variables__mystring__length
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 function __split_fields_rec__variablestore__variables__mystring__str__projection [@model_trace:.67904] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__variablestore__variables__mystring__str
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate variablestore__variables__mystring__length__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__length__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__length_ 
   (a : __rep) : Variablestore__variables__mystring__T13s.t13s
  requires {  (variablestore__variables__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__length) }
 
 predicate variablestore__variables__mystring__str__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__str__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (variablestore__variables__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Variablestore__variables__mystring__T13s__rep.to_rep a.__split_fields.rec__variablestore__variables__mystring__length) = (Variablestore__variables__mystring__T13s__rep.to_rep b.__split_fields.rec__variablestore__variables__mystring__length)) /\ (Variablestore__variables__mystringstr.bool_eq a.__split_fields.rec__variablestore__variables__mystring__str b.__split_fields.rec__variablestore__variables__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variable
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type variable =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : variable) (b : variable) : bool
 
 val constant dummy 
   : variable

 
 type variable__ref =
  { mutable variable__content : variable }
 
 function variable__ref_variable__content__projection 
   (a : variable__ref) : variable =
  a.variable__content
 
 meta "model_projection" function variable__ref_variable__content__projection
 
 meta "inline:no" function variable__ref_variable__content__projection
 
 val variable__havoc 
   (x : variable__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at variablestore.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"variablestore.ads" 30 0 0][@model_projected] [@model_trace:3593] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at variablestore.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__max_variable_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_variable_length [#"variablestore.ads" 8 0 0][@name:Max_Variable_Length] [@model_trace:3362] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for possibly declaring a logic function for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable

 val function from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
 
 val predicate from_string__function_guard 
   (temp___result_157 : Variablestore__variable.variable) (s : Standard__string.string)

end

(* Module for defining the constant "d" defined at variablestore.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__get__2__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 21 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__get__2__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v" defined at variablestore.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__get__2__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 21 0 0][@model_trace:3481] [@model_projected] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__get__2__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "d" defined at variablestore.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__has_variable__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 19 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__has_variable__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v" defined at variablestore.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__has_variable__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 19 0 0][@model_trace:3453] [@model_projected] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__has_variable__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has_variable" defined at variablestore.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__has_variable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable

 val function has_variable 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : bool
 
 val predicate has_variable__function_guard 
   (temp___result_158 : bool) (d : Variablestore__database.database) (v : Variablestore__variable.variable)

end

(* Module for possibly declaring a logic function for "get__2" defined at variablestore.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__get__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable

 val function get__2 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : int
 
 val predicate get__2__function_guard 
   (temp___result_159 : int) (d : Variablestore__database.database) (v : Variablestore__variable.variable)

end

(* Module for axiomatizing type "T17s" defined at stack.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Stack__load__L16s__T17s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t17s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t17s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17s__ref =
  { mutable t17s__content : t17s }
 
 function t17s__ref_t17s__content__projection 
   (a : t17s__ref) : t17s =
  a.t17s__content
 
 meta "model_projection" function t17s__ref_t17s__content__projection
 
 meta "inline:no" function t17s__ref_t17s__content__projection
 
 val t17s__havoc 
   (x : t17s__ref) : unit
  writes {x}

end

(* Module for defining the constant "variable" defined at stack.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__store__variable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant variable [#"stack.ads" 29 0 0][@model_projected] [@name:Variable] [@model_trace:3115] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "variable" defined at stack.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__store__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T19s" defined at stack.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Stack__store__L18s__T19s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t19s =
  < range 1 1000 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1000 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t19s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t19s__ref =
  { mutable t19s__content : t19s }
 
 function t19s__ref_t19s__content__projection 
   (a : t19s__ref) : t19s =
  a.t19s__content
 
 meta "model_projection" function t19s__ref_t19s__content__projection
 
 meta "inline:no" function t19s__ref_t19s__content__projection
 
 val t19s__havoc 
   (x : t19s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T19s" defined at stack.ads:32, created in Gnat2Why.Types.Translate_Type *)
module Stack__store__L18s__T19s__rep
 use        Stack__store__L18s__T19s as Stack__store__L18s__T19s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Stack__store__L18s__T19s.t19s) : int =
  (Stack__store__L18s__T19s.t19s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Stack__store__L18s__T19s.t19s, 
 predicate in_range = Stack__store__L18s__T19s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "database" defined at stack.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__list__database
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant database [#"stack.ads" 34 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "database" defined at stack.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__list__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "variable" defined at stack.ads:36, created in Gnat2Why.Decls.Translate_Constant *)
module Stack__remove__variable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant variable [#"stack.ads" 36 0 0][@model_trace:3210] [@model_projected] [@name:Variable] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "variable" defined at stack.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__remove__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end
(* Module for defining a ref holding the value of variable "stack" defined at stack.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__init_stack__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val stack__split_fields [#"stack.ads" 7 0 0][@model_trace:2784] [@model_projected] [@name:Stack]  : Stack__stack_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__init_stack__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at stack.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__push__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val stack__split_fields [#"stack.ads" 11 0 0][@model_trace:2830] [@model_projected] [@name:Stack]  : Stack__stack_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__push__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at stack.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val stack__split_fields [#"stack.ads" 17 0 0][@model_trace:2916] [@model_projected] [@name:Stack]  : Stack__stack_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "value" defined at stack.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__pop__value
 use        "_gnatprove_standard".Main
 use        "int".Int

 val value [#"stack.ads" 17 0 0][@model_projected] [@name:Value] [@model_trace:2925]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "value" defined at stack.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__pop__value___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at stack.ads:23, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__load__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val stack__split_fields [#"stack.ads" 23 0 0][@model_projected] [@name:Stack] [@model_trace:3000]  : Stack__stack_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__load__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "stack" defined at stack.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__store__stack
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type

 val stack__split_fields [#"stack.ads" 29 0 0][@model_trace:3106] [@model_projected] [@name:Stack]  : Stack__stack_type.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "stack" defined at stack.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__store__stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "database" defined at stack.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__store__database
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val database [#"stack.ads" 29 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "database" defined at stack.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__store__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "database" defined at stack.ads:36, created in Gnat2Why.Decls.Translate_Variable *)
module Stack__remove__database
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val database [#"stack.ads" 36 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "database" defined at stack.ads:36, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stack__remove__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "init_stack" defined at stack.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__init_stack
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "push" defined at stack.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__push
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "pop" defined at stack.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__pop
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "load" defined at stack.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__load
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "store" defined at stack.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__store
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "list" defined at stack.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__list
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at stack.ads:36, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stack__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_160 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_161 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module giving axioms for type "Tstack_dataD1" defined at stack.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__Tstack_dataD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tstack_dataB" defined at stack.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__Tstack_dataB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "stack_data" defined at stack.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_data___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__integer as Array__Int__Standard__integer
 use        Array__Int__Standard__integer as Array__Int__Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_166 : Array__Int__Standard__integer.map) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_166 : Array__Int__Standard__integer.map) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_166 : Array__Int__Standard__integer.map) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_168 : Array__Int__Standard__integer.map) (temp___skip_top_level_169 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_168 : Array__Int__Standard__integer.map) (temp___skip_top_level_169 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_168 : Array__Int__Standard__integer.map) (temp___skip_top_level_169 : bool) }

end

(* Module giving axioms for type "stack_type" defined at stack.ads:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__stack_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Stack__stack_type as Stack__stack_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_176 : Stack__stack_type.stack_type) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_176 : Stack__stack_type.stack_type) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_176 : Stack__stack_type.stack_type) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_178 : Stack__stack_type.stack_type) (temp___skip_top_level_179 : bool) =
  (if ((Stack__stack_type.stack__stack_type__size__pred temp___expr_178)) then (
   ((Standard__natural__rep.to_rep temp___expr_178.Stack__stack_type.__split_fields.Stack__stack_type.rec__stack__stack_type__size) = (0 : int))) else true)
 val default_initial_assumption [@inline] 
   (temp___expr_178 : Stack__stack_type.stack_type) (temp___skip_top_level_179 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_178 : Stack__stack_type.stack_type) (temp___skip_top_level_179 : bool) }

end

(* Module giving axioms for type "T11s" defined at stack.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__init_stack__L10s__T11s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T13s" defined at stack.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__push__L12s__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T15s" defined at stack.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__pop__L14s__T15s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_211 : Variablestore__database.database) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_211 : Variablestore__database.database) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_211 : Variablestore__database.database) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : Variablestore__database.database) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : Variablestore__database.database) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : Variablestore__database.database) (temp___skip_top_level_213 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_218 : Array__Int__Standard__character.map) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_218 : Array__Int__Standard__character.map) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_218 : Array__Int__Standard__character.map) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_220 : Array__Int__Standard__character.map) (temp___skip_top_level_221 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_220 : Array__Int__Standard__character.map) (temp___skip_top_level_221 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_220 : Array__Int__Standard__character.map) (temp___skip_top_level_221 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_228 : Variablestore__variables__mystring.mystring) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_228 : Variablestore__variables__mystring.mystring) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_228 : Variablestore__variables__mystring.mystring) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_230 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_231 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_230 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_231 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_230 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_231 : bool) }

end

(* Module giving axioms for type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 predicate dynamic_invariant [@inline] 
   (temp___expr_240 : Variablestore__variable.variable) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_240 : Variablestore__variable.variable) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_240 : Variablestore__variable.variable) (temp___is_init_236 : bool) (temp___skip_constant_237 : bool) (temp___do_toplevel_238 : bool) (temp___do_typ_inv_239 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_242 : Variablestore__variable.variable) (temp___skip_top_level_243 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_242 : Variablestore__variable.variable) (temp___skip_top_level_243 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_242 : Variablestore__variable.variable) (temp___skip_top_level_243 : bool) }

end

(* Module giving axioms for type "T17s" defined at stack.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__load__L16s__T17s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T19s" defined at stack.ads:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stack__store__L18s__T19s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) =
  (if (( temp___is_init_275 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_279)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_279 : int) (temp___is_init_275 : bool) (temp___skip_constant_276 : bool) (temp___do_toplevel_277 : bool) (temp___do_typ_inv_278 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_280 : int) (temp___skip_top_level_281 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_280 : int) (temp___skip_top_level_281 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_280 : int) (temp___skip_top_level_281 : bool) }

end
(* Module for defining the value of constant "max_size" defined at stack.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stack__max_size___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__max_size as Stack__max_size

 axiom max_size__def_axiom :
  ((Stack__max_size.max_size ) = (1000 : int))

end

(* Module for defining the value of constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Variablestore__max_variable_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__max_variable_length as Variablestore__max_variable_length

 axiom max_variable_length__def_axiom :
  ((Variablestore__max_variable_length.max_variable_length ) = (1024 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "get_size" defined at stack.ads:38, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__get_size___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__get_size as Stack__get_size

 val get_size 
   (stack : Stack__stack_type.stack_type) : int
  requires {  true }
  ensures {  ( ( (result = (Stack__get_size.get_size stack)) /\ (Stack__get_size.get_size__function_guard result stack) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_size__post_axiom :
  (forall stack   : Stack__stack_type.stack_type [(Stack__get_size.get_size stack)].
   (let result = (Stack__get_size.get_size stack) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "get_element" defined at stack.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__get_element___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__get_element as Stack__get_element

 val get_element 
   (stack : Stack__stack_type.stack_type) (index : int) : int
  requires {  true }
  ensures {  ( ( (result = (Stack__get_element.get_element stack index)) /\ (Stack__get_element.get_element__function_guard result stack index) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get_element__post_axiom :
  (forall stack   : Stack__stack_type.stack_type.
  (forall index   : int [(Stack__get_element.get_element stack index)].
   (let result = (Stack__get_element.get_element stack index) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  ))

end

(* Module for declaring a program function (and possibly an axiom) for "init_stack" defined at stack.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__init_stack___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_element as Stack__get_element

 val init_stack 
   (stack__split_fields : Stack__stack_type.__split_fields__ref) : unit
  requires {  true }
  ensures {  ( ( ( [@GP_Pretty_Ada:2803] ((epsilon temp___result_185 : int.
   ( (temp___result_185 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_185 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) = (0 : int)) ) /\ (forall i   [@model_trace:2806] [@name:I]  : int.
   ( ( ((1 : int) <= i) /\ (i <= (1000 : int)) ) -> ( [@GP_Pretty_Ada:2822] ((epsilon temp___result_186 : int.
    ( (temp___result_186 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i)) /\ (Stack__get_element.get_element__function_guard temp___result_186 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i) )) = (0 : int)) ) )) ) /\ (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } True True True True) ) }
  writes {stack__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "push" defined at stack.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__push___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_element as Stack__get_element

 val push 
   (stack__split_fields : Stack__stack_type.__split_fields__ref) (value : int) : unit
  requires {  ( [@GP_Pretty_Ada:93170] ((epsilon temp___result_188 : int.
   ( (temp___result_188 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_188 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) < (1000 : int)) ) }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:2865] ((epsilon temp___result_189 : int.
   ( (temp___result_189 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_189 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) = ((epsilon temp___result_190 : int.
   ( (temp___result_190 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_190 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) )) + (1 : int))) ) /\ ( [@GP_Pretty_Ada:2875] (value = (epsilon temp___result_192 : int.
   ( (temp___result_192 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_191 : int.
    ( (temp___result_191 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_191 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )))) /\ (Stack__get_element.get_element__function_guard temp___result_192 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_191 : int.
    ( (temp___result_191 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_191 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) ))) ))) ) ) /\ (forall i   [@name:I] [@model_trace:2883]  : int.
   ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_193 : int.
    ( (temp___result_193 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_193 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) ))) ) -> ( [@GP_Pretty_Ada:2903] ((epsilon temp___result_194 : int.
    ( (temp___result_194 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i)) /\ (Stack__get_element.get_element__function_guard temp___result_194 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i) )) = (epsilon temp___result_195 : int.
    ( (temp___result_195 = (Stack__get_element.get_element (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i)) /\ (Stack__get_element.get_element__function_guard temp___result_195 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i) ))) ) )) ) /\ (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } True True True True) ) }
  writes {stack__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "pop" defined at stack.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__pop___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_element as Stack__get_element

 val pop 
   (stack__split_fields : Stack__stack_type.__split_fields__ref) (value : int__ref) : unit
  requires {  ( [@GP_Pretty_Ada:93242] ((epsilon temp___result_198 : int.
   ( (temp___result_198 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_198 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) > (0 : int)) ) }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:2951] ((epsilon temp___result_199 : int.
   ( (temp___result_199 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_199 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) = ((epsilon temp___result_200 : int.
   ( (temp___result_200 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_200 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) )) - (1 : int))) ) /\ ( [@GP_Pretty_Ada:2961] (value.int__content = (epsilon temp___result_202 : int.
   ( (temp___result_202 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_201 : int.
    ( (temp___result_201 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_201 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) )))) /\ (Stack__get_element.get_element__function_guard temp___result_202 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_201 : int.
    ( (temp___result_201 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_201 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) ))) ))) ) ) /\ (forall i   [@model_trace:2971] [@name:I]  : int.
   ( ( ((1 : int) <= i) /\ (i <= (1000 : int)) ) -> ( [@GP_Pretty_Ada:2987] ((epsilon temp___result_203 : int.
    ( (temp___result_203 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i)) /\ (Stack__get_element.get_element__function_guard temp___result_203 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i) )) = (epsilon temp___result_204 : int.
    ( (temp___result_204 = (Stack__get_element.get_element (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i)) /\ (Stack__get_element.get_element__function_guard temp___result_204 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i) ))) ) )) ) /\ ( (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } True True True True) /\ (Standard__integer___axiom.dynamic_invariant value.int__content True True True True) ) ) }
  writes {stack__split_fields, value}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string as Variablestore__from_string
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
  requires {  ( [@GP_Pretty_Ada:68660] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Variablestore__from_string.from_string s)) /\ (Variablestore__from_string.from_string__function_guard result s) )/\(Variablestore__variable___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "has_variable" defined at variablestore.ads:19, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__has_variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable

 val has_variable 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__has_variable.has_variable d v)) /\ (Variablestore__has_variable.has_variable__function_guard result d v) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at variablestore.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__get__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__get__2 as Variablestore__get__2

 val get__2 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : int
  requires {  ( [@GP_Pretty_Ada:68597] ((epsilon temp___result_251 : bool.
   ( (temp___result_251 = (Variablestore__has_variable.has_variable d v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_251 d v) )) = True) ) }
  ensures {  ( ( (result = (Variablestore__get__2.get__2 d v)) /\ (Variablestore__get__2.get__2__function_guard result d v) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get__2__post_axiom :
  (forall d   : Variablestore__database.database.
  (forall v   : Variablestore__variable.variable [(Variablestore__get__2.get__2 d v)].
   (let result = (Variablestore__get__2.get__2 d v) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  ))

end

(* Module for declaring a program function (and possibly an axiom) for "load" defined at stack.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__load___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_element as Stack__get_element
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string as Variablestore__from_string
 use        Variablestore__get__2 as Variablestore__get__2

 val load 
   (stack__split_fields : Stack__stack_type.__split_fields__ref) (variable : Standard__string.string) (database : Variablestore__database.database) : unit
  requires {  ( [@GP_Pretty_Ada:93312] ((epsilon temp___result_253 : int.
   ( (temp___result_253 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_253 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) < (1000 : int)) ) }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:3046] ((epsilon temp___result_254 : int.
   ( (temp___result_254 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_254 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) = ((epsilon temp___result_255 : int.
   ( (temp___result_255 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_255 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) )) + (1 : int))) ) /\ ( [@GP_Pretty_Ada:3065] ((epsilon temp___result_257 : int.
   ( (temp___result_257 = (Variablestore__get__2.get__2 database (epsilon temp___result_256 : Variablestore__variable.variable.
    ( (temp___result_256 = (Variablestore__from_string.from_string variable)) /\ (Variablestore__from_string.from_string__function_guard temp___result_256 variable) )))) /\ (Variablestore__get__2.get__2__function_guard temp___result_257 database (epsilon temp___result_256 : Variablestore__variable.variable.
    ( (temp___result_256 = (Variablestore__from_string.from_string variable)) /\ (Variablestore__from_string.from_string__function_guard temp___result_256 variable) ))) )) = (epsilon temp___result_259 : int.
   ( (temp___result_259 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_258 : int.
    ( (temp___result_258 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_258 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )))) /\ (Stack__get_element.get_element__function_guard temp___result_259 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } (epsilon temp___result_258 : int.
    ( (temp___result_258 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_258 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) ))) ))) ) ) /\ (forall i   [@name:I] [@model_trace:3073]  : int.
   ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_260 : int.
    ( (temp___result_260 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_260 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) ))) ) -> ( [@GP_Pretty_Ada:3093] ((epsilon temp___result_261 : int.
    ( (temp___result_261 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i)) /\ (Stack__get_element.get_element__function_guard temp___result_261 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i) )) = (epsilon temp___result_262 : int.
    ( (temp___result_262 = (Stack__get_element.get_element (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i)) /\ (Stack__get_element.get_element__function_guard temp___result_262 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i) ))) ) )) ) /\ (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } True True True True) ) }
  writes {stack__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "store" defined at stack.ads:29, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__store___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_element as Stack__get_element
 use        Variablestore__database as Variablestore__database
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val store 
   (stack__split_fields : Stack__stack_type.__split_fields__ref) (variable : Standard__string.string) (database : Variablestore__database.database__ref) : unit
  requires {  ( [@GP_Pretty_Ada:93393] ((epsilon temp___result_266 : int.
   ( (temp___result_266 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_266 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) > (0 : int)) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:3152] ((epsilon temp___result_267 : int.
   ( (temp___result_267 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_267 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content }) )) = ((epsilon temp___result_268 : int.
   ( (temp___result_268 = (Stack__get_size.get_size (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ))) /\ (Stack__get_size.get_size__function_guard temp___result_268 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } )) )) - (1 : int))) ) /\ (forall i   [@model_trace:3161] [@name:I]  : int.
   ( ( ((1 : int) <= i) /\ (i <= (1000 : int)) ) -> ( [@GP_Pretty_Ada:3177] ((epsilon temp___result_269 : int.
    ( (temp___result_269 = (Stack__get_element.get_element { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i)) /\ (Stack__get_element.get_element__function_guard temp___result_269 { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } i) )) = (epsilon temp___result_270 : int.
    ( (temp___result_270 = (Stack__get_element.get_element (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i)) /\ (Stack__get_element.get_element__function_guard temp___result_270 (old { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } ) i) ))) ) )) ) /\ ( (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = stack__split_fields.Stack__stack_type.__split_fields__content } True True True True) /\ (Variablestore__database___axiom.dynamic_invariant database.Variablestore__database.database__content True True True True) ) ) }
  writes {stack__split_fields, database}

end

(* Module for declaring a program function (and possibly an axiom) for "list" defined at stack.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__list___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val list 
   (database : Variablestore__database.database) : unit
  requires {  true }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at stack.ads:36, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stack__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__database as Variablestore__database
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val remove 
   (variable : Standard__string.string) (database : Variablestore__database.database__ref) : unit
  requires {  true }
  ensures {  (Variablestore__database___axiom.dynamic_invariant database.Variablestore__database.database__content True True True True) }
  writes {database}

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "stack" defined at stack.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Stack__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__max_size as Stack__max_size
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__max_size___axiom as Stack__max_size___axiom

 let def [#"stack.ads" 3 0 0][@GP_Subp:stack.ads:3] 
   (__void_param : unit)
  requires { [#"stack.ads" 3 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"stack.ads" 3 0 0] ());
  ([#"stack.ads" 4 0 0] ());
  ([#"stack.ads" 5 0 0] ( [#"stack.ads" 5 0 0] begin ensures {true} let _ = (let _ = (1000 : int) in (
   ()))
   in () end ;
  [#"stack.ads" 5 0 0] assume { [#"stack.ads" 5 0 0] (Standard__natural___axiom.dynamic_invariant Stack__max_size.max_size True False True True) } ));
  ([#"stack.ads" 7 0 0] ());
  ([#"stack.ads" 8 0 0] ());
  ([#"stack.ads" 11 0 0] ());
  ([#"stack.ads" 13 0 0] ());
  ([#"stack.ads" 12 0 0] ());
  ([#"stack.ads" 17 0 0] ());
  ([#"stack.ads" 19 0 0] ());
  ([#"stack.ads" 18 0 0] ());
  ([#"stack.ads" 23 0 0] ());
  ([#"stack.ads" 25 0 0] ());
  ([#"stack.ads" 24 0 0] ());
  ([#"stack.ads" 29 0 0] ());
  ([#"stack.ads" 31 0 0] ());
  ([#"stack.ads" 30 0 0] ());
  ([#"stack.ads" 34 0 0] ());
  ([#"stack.ads" 36 0 0] ());
  ([#"stack.ads" 38 0 0] ());
  ([#"stack.ads" 40 0 0] ());
  ();
  ([#"stack.ads" 43 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ());
  ([#"stack.ads" 45 0 0] ()) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "stack_type" defined at stack.ads:4, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Stack__stack_type__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Stack__stack_type as Stack__stack_type
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 let def [@GP_Subp:stack.ads:4] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___282 [@mlw:proxy_symbol] [@introduced] =  (val _f : Stack__stack_type.stack_type
  ensures { true} 
  in _f) in (
   ( ();
   (if ((Stack__stack_type.stack__stack_type__size__pred(temp___282))) then (
     begin ensures {true} let _ = (let _ = (0 : int) in (
     ()))
     in () end )) )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "get_size" defined at stack.ads:38, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__get_size__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size__stack as Stack__get_size__stack
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__get_size__stack___axiom as Stack__get_size__stack___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 val stack__get_size__result [@model_projected] [@name:Get_Size] [@model_trace:3232@result]  : int__ref 
 
 let def [#"stack.ads" 38 0 0][@GP_Subp:stack.ads:38] 
   (__void_param : unit)
  requires { [#"stack.ads" 38 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:38 *)
  ;
  [#"stack.ads" 38 0 0] assume { [#"stack.ads" 38 0 0] (Stack__stack_type___axiom.dynamic_invariant Stack__get_size__stack.stack True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:38 *)
  ;
  [#"stack.ads" 38 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:38 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_element" defined at stack.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__get_element__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_element__stack as Stack__get_element__stack
 use        Stack__get_element__index as Stack__get_element__index
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__get_element__stack___axiom as Stack__get_element__stack___axiom
 use        Stack__get_element__index___axiom as Stack__get_element__index___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 val stack__get_element__result [@model_projected] [@name:Get_Element] [@model_trace:3251@result]  : int__ref 
 
 let def [#"stack.ads" 40 0 0][@GP_Subp:stack.ads:40] 
   (__void_param : unit)
  requires { [#"stack.ads" 40 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:40 *)
  ;
  [#"stack.ads" 40 0 0] assume { [#"stack.ads" 40 0 0] (Stack__stack_type___axiom.dynamic_invariant Stack__get_element__stack.stack True False True True) };
  [#"stack.ads" 40 0 0] assume { [#"stack.ads" 40 0 0] (Standard__integer___axiom.dynamic_invariant Stack__get_element__index.index True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:40 *)
  ;
  [#"stack.ads" 40 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:40 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init_stack" defined at stack.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__init_stack__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__init_stack__stack as Stack__init_stack__stack
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__init_stack__stack___axiom as Stack__init_stack__stack___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 let def [#"stack.ads" 7 0 0][@GP_Subp:stack.ads:7] 
   (__void_param : unit)
  requires { [#"stack.ads" 7 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:7 *)
  ;
  [#"stack.ads" 7 0 0] assume { [#"stack.ads" 7 0 0] (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = Stack__init_stack__stack.stack__split_fields.Stack__stack_type.__split_fields__content } False False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:7 *)
  ;
  [#"stack.ads" 7 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:7 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "push" defined at stack.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__push__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__push__stack as Stack__push__stack
 use        Stack__push__value as Stack__push__value
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__push__stack___axiom as Stack__push__stack___axiom
 use        Stack__push__value___axiom as Stack__push__value___axiom
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 let def [#"stack.ads" 11 0 0][@GP_Subp:stack.ads:11] 
   (__void_param : unit)
  requires { [#"stack.ads" 11 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:11 *)
  ;
  [#"stack.ads" 11 0 0] assume { [#"stack.ads" 11 0 0] (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content } True False True True) };
  [#"stack.ads" 11 0 0] assume { [#"stack.ads" 11 0 0] (Standard__integer___axiom.dynamic_invariant Stack__push__value.value True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:11 *)
  ;
  [#"stack.ads" 11 0 0] begin ensures {true} let _ = (let _ = ((Stack__get_size___axiom.get_size({ Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) < (1000 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:11 *)
  ;
  [#"stack.ads" 11 0 0] assume { [#"stack.ads" 11 0 0] ( [@GP_Pretty_Ada:93170] ((epsilon temp___result_293 : int.
   ( (temp___result_293 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_293 { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content }) )) < (1000 : int)) ) };
  [#"stack.ads" 11 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
   ()))
   in () end ;
  (let temp___old_288 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 11 0 0] (val _f : Stack__stack_type.stack_type
  ensures {[#"stack.ads" 11 0 0] (result = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
  in _f) in (
   ( [#"stack.ads" 11 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
    ()))
    in () end ;
   (let temp___old_287 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 11 0 0] (val _f : Stack__stack_type.stack_type
   ensures {[#"stack.ads" 11 0 0] (result = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
   in _f) in (
    ( [#"stack.ads" 11 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
     ()))
     in () end ;
    (let temp___old_286 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 11 0 0] (val _f : Stack__stack_type.stack_type
    ensures {[#"stack.ads" 11 0 0] (result = { Stack__stack_type.__split_fields = Stack__push__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "pop" defined at stack.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__pop__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__pop__stack as Stack__pop__stack
 use        Stack__pop__value as Stack__pop__value
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Stack__pop__stack___axiom as Stack__pop__stack___axiom
 use        Stack__pop__value___axiom as Stack__pop__value___axiom
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom

 let def [#"stack.ads" 17 0 0][@GP_Subp:stack.ads:17] 
   (__void_param : unit)
  requires { [#"stack.ads" 17 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:17 *)
  ;
  [#"stack.ads" 17 0 0] assume { [#"stack.ads" 17 0 0] (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content } True False True True) };
  [#"stack.ads" 17 0 0] assume { [#"stack.ads" 17 0 0] (Standard__integer___axiom.dynamic_invariant Stack__pop__value.value.int__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:17 *)
  ;
  [#"stack.ads" 17 0 0] begin ensures {true} let _ = (let _ = ((Stack__get_size___axiom.get_size({ Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) > (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:17 *)
  ;
  [#"stack.ads" 17 0 0] assume { [#"stack.ads" 17 0 0] ( [@GP_Pretty_Ada:93242] ((epsilon temp___result_300 : int.
   ( (temp___result_300 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_300 { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content }) )) > (0 : int)) ) };
  [#"stack.ads" 17 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
   ()))
   in () end ;
  (let temp___old_295 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 17 0 0] (val _f : Stack__stack_type.stack_type
  ensures {[#"stack.ads" 17 0 0] (result = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
  in _f) in (
   ( [#"stack.ads" 17 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
    ()))
    in () end ;
   (let temp___old_294 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 17 0 0] (val _f : Stack__stack_type.stack_type
   ensures {[#"stack.ads" 17 0 0] (result = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
   in _f) in (
    ( [#"stack.ads" 17 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
     ()))
     in () end ;
    (let temp___old_296 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 17 0 0] (val _f : Stack__stack_type.stack_type
    ensures {[#"stack.ads" 17 0 0] (result = { Stack__stack_type.__split_fields = Stack__pop__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "load" defined at stack.ads:23, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__load__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string___axiom as Standard__string___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__load__stack as Stack__load__stack
 use        Stack__load__variable as Stack__load__variable
 use        Stack__load__database as Stack__load__database
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__load__stack___axiom as Stack__load__stack___axiom
 use        Stack__load__variable___axiom as Stack__load__variable___axiom
 use        Stack__load__database___axiom as Stack__load__database___axiom
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom

 let def [#"stack.ads" 23 0 0][@GP_Subp:stack.ads:23] 
   (__void_param : unit)
  requires { [#"stack.ads" 23 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:23 *)
  ;
  [#"stack.ads" 23 0 0] assume { [#"stack.ads" 23 0 0] (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content } True False True True) };
  [#"stack.ads" 23 0 0] assume { [#"stack.ads" 23 0 0] (Standard__string___axiom.dynamic_invariant Stack__load__variable.variable True False True True) };
  [#"stack.ads" 23 0 0] assume { [#"stack.ads" 23 0 0] (Variablestore__database___axiom.dynamic_invariant Stack__load__database.database True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:23 *)
  ;
  [#"stack.ads" 23 0 0] begin ensures {true} let _ = (let _ = ((Stack__get_size___axiom.get_size({ Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) < (1000 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:23 *)
  ;
  [#"stack.ads" 23 0 0] assume { [#"stack.ads" 23 0 0] ( [@GP_Pretty_Ada:93312] ((epsilon temp___result_309 : int.
   ( (temp___result_309 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_309 { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content }) )) < (1000 : int)) ) };
  [#"stack.ads" 23 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
   ()))
   in () end ;
  (let temp___old_301 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 23 0 0] (val _f : Stack__stack_type.stack_type
  ensures {[#"stack.ads" 23 0 0] (result = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
  in _f) in (
   ( [#"stack.ads" 23 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
    ()))
    in () end ;
   (let temp___old_303 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 23 0 0] (val _f : Stack__stack_type.stack_type
   ensures {[#"stack.ads" 23 0 0] (result = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
   in _f) in (
    ( [#"stack.ads" 23 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
     ()))
     in () end ;
    (let temp___old_302 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 23 0 0] (val _f : Stack__stack_type.stack_type
    ensures {[#"stack.ads" 23 0 0] (result = { Stack__stack_type.__split_fields = Stack__load__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
    in _f) in (
     ()))
     )))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "store" defined at stack.ads:29, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__store__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string___axiom as Standard__string___axiom
 use        Stack__stack_type as Stack__stack_type
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Stack__get_size as Stack__get_size
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Variablestore__database as Variablestore__database
 use        Stack__store__stack as Stack__store__stack
 use        Stack__store__variable as Stack__store__variable
 use        Stack__store__database as Stack__store__database
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__store__stack___axiom as Stack__store__stack___axiom
 use        Stack__store__variable___axiom as Stack__store__variable___axiom
 use        Stack__store__database___axiom as Stack__store__database___axiom
 use        Stack__get_size___axiom as Stack__get_size___axiom
 use        Stack__stack_data___axiom as Stack__stack_data___axiom
 use        Stack__stack_type___axiom as Stack__stack_type___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom

 let def [#"stack.ads" 29 0 0][@GP_Subp:stack.ads:29] 
   (__void_param : unit)
  requires { [#"stack.ads" 29 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:29 *)
  ;
  [#"stack.ads" 29 0 0] assume { [#"stack.ads" 29 0 0] (Stack__stack_type___axiom.dynamic_invariant { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content } True False True True) };
  [#"stack.ads" 29 0 0] assume { [#"stack.ads" 29 0 0] (Standard__string___axiom.dynamic_invariant Stack__store__variable.variable True False True True) };
  [#"stack.ads" 29 0 0] assume { [#"stack.ads" 29 0 0] (Variablestore__database___axiom.dynamic_invariant Stack__store__database.database.Variablestore__database.database__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:29 *)
  ;
  [#"stack.ads" 29 0 0] begin ensures {true} let _ = (let _ = ((Stack__get_size___axiom.get_size({ Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) > (0 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:29 *)
  ;
  [#"stack.ads" 29 0 0] assume { [#"stack.ads" 29 0 0] ( [@GP_Pretty_Ada:93393] ((epsilon temp___result_316 : int.
   ( (temp___result_316 = (Stack__get_size.get_size { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content })) /\ (Stack__get_size.get_size__function_guard temp___result_316 { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content }) )) > (0 : int)) ) };
  [#"stack.ads" 29 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
   ()))
   in () end ;
  (let temp___old_311 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 29 0 0] (val _f : Stack__stack_type.stack_type
  ensures {[#"stack.ads" 29 0 0] (result = { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
  in _f) in (
   ( [#"stack.ads" 29 0 0] begin ensures {true} let _ = (let _ = { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content } in (
    ()))
    in () end ;
   (let temp___old_310 [@mlw:proxy_symbol] [@introduced] = [#"stack.ads" 29 0 0] (val _f : Stack__stack_type.stack_type
   ensures {[#"stack.ads" 29 0 0] (result = { Stack__stack_type.__split_fields = Stack__store__stack.stack__split_fields.Stack__stack_type.__split_fields__content })} 
   in _f) in (
    ()))
    )))
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "list" defined at stack.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__list__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Stack__list__database as Stack__list__database
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Stack__list__database___axiom as Stack__list__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom

 let def [#"stack.ads" 34 0 0][@GP_Subp:stack.ads:34] 
   (__void_param : unit)
  requires { [#"stack.ads" 34 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:34 *)
  ;
  [#"stack.ads" 34 0 0] assume { [#"stack.ads" 34 0 0] (Variablestore__database___axiom.dynamic_invariant Stack__list__database.database True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:34 *)
  ;
  [#"stack.ads" 34 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:34 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "remove" defined at stack.ads:36, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stack__remove__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__database as Variablestore__database
 use        Stack__remove__variable as Stack__remove__variable
 use        Stack__remove__database as Stack__remove__database
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Stack__remove__variable___axiom as Stack__remove__variable___axiom
 use        Stack__remove__database___axiom as Stack__remove__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom

 let def [#"stack.ads" 36 0 0][@GP_Subp:stack.ads:36] 
   (__void_param : unit)
  requires { [#"stack.ads" 36 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram stack.ads:36 *)
  ;
  [#"stack.ads" 36 0 0] assume { [#"stack.ads" 36 0 0] (Standard__string___axiom.dynamic_invariant Stack__remove__variable.variable True False True True) };
  [#"stack.ads" 36 0 0] assume { [#"stack.ads" 36 0 0] (Variablestore__database___axiom.dynamic_invariant Stack__remove__database.database.Variablestore__database.database__content True False True True) };
  () (* Check for RTE in the Pre of the subprogram stack.ads:36 *)
  ;
  [#"stack.ads" 36 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram stack.ads:36 *)
   )
end
